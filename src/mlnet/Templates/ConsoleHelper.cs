// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace mlnet.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ConsoleHelper : ConsoleHelperBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Micro" +
                    "soft.Data.DataView;\r\nusing Microsoft.ML.Core.Data;\r\nusing Microsoft.ML.Data;\r\n\r\n" +
                    "namespace MlnetSample\r\n{\r\n    public static class ConsoleHelper\r\n    {\r\n        " +
                    "public static void PrintPrediction(string prediction)\r\n        {\r\n            Co" +
                    "nsole.WriteLine($\"*************************************************\");\r\n        " +
                    "    Console.WriteLine($\"Predicted : {prediction}\");\r\n            Console.WriteLi" +
                    "ne($\"*************************************************\");\r\n        }\r\n\r\n        " +
                    "public static void PrintRegressionPredictionVersusObserved(string predictionCoun" +
                    "t, string observedCount)\r\n        {\r\n            Console.WriteLine($\"-----------" +
                    "--------------------------------------\");\r\n            Console.WriteLine($\"Predi" +
                    "cted : {predictionCount}\");\r\n            Console.WriteLine($\"Actual:     {observ" +
                    "edCount}\");\r\n            Console.WriteLine($\"-----------------------------------" +
                    "--------------\");\r\n        }\r\n\r\n        //(CDLTLL-Pending to Fix - Results --> ?" +
                    ")\r\n        //\r\n        public static void PrintRegressionMetrics(string name, Re" +
                    "gressionMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"***********" +
                    "**************************************\");\r\n            Console.WriteLine($\"*    " +
                    "   Metrics for {name} regression model      \");\r\n            Console.WriteLine($" +
                    "\"*------------------------------------------------\");\r\n            Console.Write" +
                    "Line($\"*       LossFn:        {metrics.LossFn:0.##}\");\r\n            Console.Writ" +
                    "eLine($\"*       R2 Score:      {metrics.RSquared:0.##}\");\r\n            Console.W" +
                    "riteLine($\"*       Absolute loss: {metrics.L1:#.##}\");\r\n            Console.Writ" +
                    "eLine($\"*       Squared loss:  {metrics.L2:#.##}\");\r\n            Console.WriteLi" +
                    "ne($\"*       RMS loss:      {metrics.Rms:#.##}\");\r\n            Console.WriteLine" +
                    "($\"*************************************************\");\r\n        }\r\n\r\n        pu" +
                    "blic static void PrintBinaryClassificationMetrics(string name, CalibratedBinaryC" +
                    "lassificationMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"******" +
                    "******************************************************\");\r\n            Console.W" +
                    "riteLine($\"*       Metrics for {name} binary classification model      \");\r\n    " +
                    "        Console.WriteLine($\"*---------------------------------------------------" +
                    "--------\");\r\n            Console.WriteLine($\"*       Accuracy: {metrics.Accuracy" +
                    ":P2}\");\r\n            Console.WriteLine($\"*       Auc:      {metrics.Auc:P2}\");\r\n" +
                    "            Console.WriteLine($\"*       Auprc:  {metrics.Auprc:P2}\");\r\n         " +
                    "   Console.WriteLine($\"*       F1Score:  {metrics.F1Score:P2}\");\r\n            Co" +
                    "nsole.WriteLine($\"*       LogLoss:  {metrics.LogLoss:#.##}\");\r\n            Conso" +
                    "le.WriteLine($\"*       LogLossReduction:  {metrics.LogLossReduction:#.##}\");\r\n  " +
                    "          Console.WriteLine($\"*       PositivePrecision:  {metrics.PositivePreci" +
                    "sion:#.##}\");\r\n            Console.WriteLine($\"*       PositiveRecall:  {metrics" +
                    ".PositiveRecall:#.##}\");\r\n            Console.WriteLine($\"*       NegativePrecis" +
                    "ion:  {metrics.NegativePrecision:#.##}\");\r\n            Console.WriteLine($\"*    " +
                    "   NegativeRecall:  {metrics.NegativeRecall:P2}\");\r\n            Console.WriteLin" +
                    "e($\"************************************************************\");\r\n        }\r\n" +
                    "\r\n        public static void PrintMultiClassClassificationMetrics(string name, M" +
                    "ultiClassClassifierMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"" +
                    "************************************************************\");\r\n            Con" +
                    "sole.WriteLine($\"*    Metrics for {name} multi-class classification model   \");\r" +
                    "\n            Console.WriteLine($\"*----------------------------------------------" +
                    "-------------\");\r\n            Console.WriteLine($\"    AccuracyMacro = {metrics.A" +
                    "ccuracyMacro:0.####}, a value between 0 and 1, the closer to 1, the better\");\r\n " +
                    "           Console.WriteLine($\"    AccuracyMicro = {metrics.AccuracyMicro:0.####" +
                    "}, a value between 0 and 1, the closer to 1, the better\");\r\n            Console." +
                    "WriteLine($\"    LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better\"" +
                    ");\r\n            Console.WriteLine($\"    LogLoss for class 1 = {metrics.PerClassL" +
                    "ogLoss[0]:0.####}, the closer to 0, the better\");\r\n            Console.WriteLine" +
                    "($\"    LogLoss for class 2 = {metrics.PerClassLogLoss[1]:0.####}, the closer to " +
                    "0, the better\");\r\n            Console.WriteLine($\"    LogLoss for class 3 = {met" +
                    "rics.PerClassLogLoss[2]:0.####}, the closer to 0, the better\");\r\n            Con" +
                    "sole.WriteLine($\"************************************************************\");" +
                    "\r\n        }\r\n\r\n        //(CDLTLL-Pending to Fix - Results --> ?)\r\n\r\n        publ" +
                    "ic static void PrintRegressionFoldsAverageMetrics(string algorithmName,\r\n       " +
                    "                                                       (RegressionMetrics metric" +
                    "s,\r\n                                                               ITransformer " +
                    "model,\r\n                                                               IDataView" +
                    " scoredTestData)[] crossValidationResults\r\n                                     " +
                    "                        )\r\n        {\r\n            var L1 = crossValidationResult" +
                    "s.Select(r => r.metrics.L1);\r\n            var L2 = crossValidationResults.Select" +
                    "(r => r.metrics.L2);\r\n            var RMS = crossValidationResults.Select(r => r" +
                    ".metrics.L1);\r\n            var lossFunction = crossValidationResults.Select(r =>" +
                    " r.metrics.LossFn);\r\n            var R2 = crossValidationResults.Select(r => r.m" +
                    "etrics.RSquared);\r\n\r\n            Console.WriteLine($\"***************************" +
                    "********************************************************************************" +
                    "**\");\r\n            Console.WriteLine($\"*       Metrics for {algorithmName} Regre" +
                    "ssion model      \");\r\n            Console.WriteLine($\"*-------------------------" +
                    "--------------------------------------------------------------------------------" +
                    "---\");\r\n            Console.WriteLine($\"*       Average L1 Loss:    {L1.Average(" +
                    "):0.###} \");\r\n            Console.WriteLine($\"*       Average L2 Loss:    {L2.Av" +
                    "erage():0.###}  \");\r\n            Console.WriteLine($\"*       Average RMS:       " +
                    "   {RMS.Average():0.###}  \");\r\n            Console.WriteLine($\"*       Average L" +
                    "oss Function: {lossFunction.Average():0.###}  \");\r\n            Console.WriteLine" +
                    "($\"*       Average R-squared: {R2.Average():0.###}  \");\r\n            Console.Wri" +
                    "teLine($\"***********************************************************************" +
                    "**************************************\");\r\n        }\r\n\r\n        public static vo" +
                    "id PrintBinaryClassificationFoldsAverageMetrics(\r\n                              " +
                    "           string algorithmName,\r\n                                         (Bina" +
                    "ryClassificationMetrics metrics,\r\n                                          ITra" +
                    "nsformer model,\r\n                                          IDataView scoredTestD" +
                    "ata)[] crossValResults\r\n                                                        " +
                    "                   )\r\n        {\r\n            var metricsInMultipleFolds = crossV" +
                    "alResults.Select(r => r.metrics);\r\n\r\n            var AccuracyValues = metricsInM" +
                    "ultipleFolds.Select(m => m.Accuracy);\r\n            var AccuracyAverage = Accurac" +
                    "yValues.Average();\r\n            var AccuraciesStdDeviation = CalculateStandardDe" +
                    "viation(AccuracyValues);\r\n            var AccuraciesConfidenceInterval95 = Calcu" +
                    "lateConfidenceInterval95(AccuracyValues);\r\n\r\n\r\n            Console.WriteLine($\"*" +
                    "********************************************************************************" +
                    "****************************\");\r\n            Console.WriteLine($\"*       Metrics" +
                    " for {algorithmName} Binary Classification model      \");\r\n            Console.W" +
                    "riteLine($\"*--------------------------------------------------------------------" +
                    "----------------------------------------\");\r\n            Console.WriteLine($\"*  " +
                    "     Average Accuracy:    {AccuracyAverage:0.###}  - Standard deviation: ({Accur" +
                    "aciesStdDeviation:#.###})  - Confidence Interval 95%: ({AccuraciesConfidenceInte" +
                    "rval95:#.###})\");\r\n            Console.WriteLine($\"*****************************" +
                    "********************************************************************************" +
                    "\");\r\n\r\n        }\r\n\r\n        public static void PrintMulticlassClassificationFold" +
                    "sAverageMetrics(\r\n                                         string algorithmName," +
                    "\r\n                                         (MultiClassClassifierMetrics metrics," +
                    "\r\n                                          ITransformer model,\r\n               " +
                    "                           IDataView scoredTestData)[] crossValResults\r\n        " +
                    "                                                                   )\r\n        {\r" +
                    "\n            var metricsInMultipleFolds = crossValResults.Select(r => r.metrics)" +
                    ";\r\n\r\n            var microAccuracyValues = metricsInMultipleFolds.Select(m => m." +
                    "AccuracyMicro);\r\n            var microAccuracyAverage = microAccuracyValues.Aver" +
                    "age();\r\n            var microAccuraciesStdDeviation = CalculateStandardDeviation" +
                    "(microAccuracyValues);\r\n            var microAccuraciesConfidenceInterval95 = Ca" +
                    "lculateConfidenceInterval95(microAccuracyValues);\r\n\r\n            var macroAccura" +
                    "cyValues = metricsInMultipleFolds.Select(m => m.AccuracyMacro);\r\n            var" +
                    " macroAccuracyAverage = macroAccuracyValues.Average();\r\n            var macroAcc" +
                    "uraciesStdDeviation = CalculateStandardDeviation(macroAccuracyValues);\r\n        " +
                    "    var macroAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(macr" +
                    "oAccuracyValues);\r\n\r\n            var logLossValues = metricsInMultipleFolds.Sele" +
                    "ct(m => m.LogLoss);\r\n            var logLossAverage = logLossValues.Average();\r\n" +
                    "            var logLossStdDeviation = CalculateStandardDeviation(logLossValues);" +
                    "\r\n            var logLossConfidenceInterval95 = CalculateConfidenceInterval95(lo" +
                    "gLossValues);\r\n\r\n            var logLossReductionValues = metricsInMultipleFolds" +
                    ".Select(m => m.LogLossReduction);\r\n            var logLossReductionAverage = log" +
                    "LossReductionValues.Average();\r\n            var logLossReductionStdDeviation = C" +
                    "alculateStandardDeviation(logLossReductionValues);\r\n            var logLossReduc" +
                    "tionConfidenceInterval95 = CalculateConfidenceInterval95(logLossReductionValues)" +
                    ";\r\n\r\n            Console.WriteLine($\"*******************************************" +
                    "******************************************************************\");\r\n         " +
                    "   Console.WriteLine($\"*       Metrics for {algorithmName} Multi-class Classific" +
                    "ation model      \");\r\n            Console.WriteLine($\"*-------------------------" +
                    "--------------------------------------------------------------------------------" +
                    "---\");\r\n            Console.WriteLine($\"*       Average MicroAccuracy:    {micro" +
                    "AccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDeviation:#.##" +
                    "#})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:#.###})\");" +
                    "\r\n            Console.WriteLine($\"*       Average MacroAccuracy:    {macroAccura" +
                    "cyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:#.###})  -" +
                    " Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###})\");\r\n    " +
                    "        Console.WriteLine($\"*       Average LogLoss:          {logLossAverage:#." +
                    "###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidence Interval" +
                    " 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"" +
                    "*       Average LogLossReduction: {logLossReductionAverage:#.###}  - Standard de" +
                    "viation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval 95%: ({lo" +
                    "gLossReductionConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"*" +
                    "********************************************************************************" +
                    "****************************\");\r\n\r\n        }\r\n\r\n        public static double Cal" +
                    "culateStandardDeviation(IEnumerable<double> values)\r\n        {\r\n            doub" +
                    "le average = values.Average();\r\n            double sumOfSquaresOfDifferences = v" +
                    "alues.Select(val => (val - average) * (val - average)).Sum();\r\n            doubl" +
                    "e standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (values.Count() - 1)" +
                    ");\r\n            return standardDeviation;\r\n        }\r\n\r\n        public static do" +
                    "uble CalculateConfidenceInterval95(IEnumerable<double> values)\r\n        {\r\n     " +
                    "       double confidenceInterval95 = 1.96 * CalculateStandardDeviation(values) /" +
                    " Math.Sqrt((values.Count() - 1));\r\n            return confidenceInterval95;\r\n   " +
                    "     }\r\n\r\n        public static void PrintClusteringMetrics(string name, Cluster" +
                    "ingMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"****************" +
                    "*********************************\");\r\n            Console.WriteLine($\"*       Me" +
                    "trics for {name} clustering model      \");\r\n            Console.WriteLine($\"*---" +
                    "---------------------------------------------\");\r\n            Console.WriteLine(" +
                    "$\"*       AvgMinScore: {metrics.AvgMinScore}\");\r\n            Console.WriteLine($" +
                    "\"*       DBI is: {metrics.Dbi}\");\r\n            Console.WriteLine($\"*************" +
                    "************************************\");\r\n        }\r\n\r\n        public static void" +
                    " ConsoleWriteHeader(params string[] lines)\r\n        {\r\n            var defaultCo" +
                    "lor = Console.ForegroundColor;\r\n            Console.ForegroundColor = ConsoleCol" +
                    "or.Yellow;\r\n            Console.WriteLine(\" \");\r\n            foreach (var line i" +
                    "n lines)\r\n            {\r\n                Console.WriteLine(line);\r\n            }" +
                    "\r\n            var maxLength = lines.Select(x => x.Length).Max();\r\n            Co" +
                    "nsole.WriteLine(new string(\'#\', maxLength));\r\n            Console.ForegroundColo" +
                    "r = defaultColor;\r\n        }\r\n\r\n        public static void ConsoleWriterSection(" +
                    "params string[] lines)\r\n        {\r\n            var defaultColor = Console.Foregr" +
                    "oundColor;\r\n            Console.ForegroundColor = ConsoleColor.Blue;\r\n          " +
                    "  Console.WriteLine(\" \");\r\n            foreach (var line in lines)\r\n            " +
                    "{\r\n                Console.WriteLine(line);\r\n            }\r\n            var maxL" +
                    "ength = lines.Select(x => x.Length).Max();\r\n            Console.WriteLine(new st" +
                    "ring(\'-\', maxLength));\r\n            Console.ForegroundColor = defaultColor;\r\n   " +
                    "     }\r\n\r\n        public static void ConsolePressAnyKey()\r\n        {\r\n          " +
                    "  var defaultColor = Console.ForegroundColor;\r\n            Console.ForegroundCol" +
                    "or = ConsoleColor.Green;\r\n            Console.WriteLine(\" \");\r\n            Conso" +
                    "le.WriteLine(\"Press any key to finish.\");\r\n            Console.ReadKey();\r\n     " +
                    "   }\r\n\r\n        public static void ConsoleWriteException(params string[] lines)\r" +
                    "\n        {\r\n            var defaultColor = Console.ForegroundColor;\r\n           " +
                    " Console.ForegroundColor = ConsoleColor.Red;\r\n            const string exception" +
                    "Title = \"EXCEPTION\";\r\n            Console.WriteLine(\" \");\r\n            Console.W" +
                    "riteLine(exceptionTitle);\r\n            Console.WriteLine(new string(\'#\', excepti" +
                    "onTitle.Length));\r\n            Console.ForegroundColor = defaultColor;\r\n        " +
                    "    foreach (var line in lines)\r\n            {\r\n                Console.WriteLin" +
                    "e(line);\r\n            }\r\n        }\r\n\r\n        public static void ConsoleWriteWar" +
                    "ning(params string[] lines)\r\n        {\r\n            var defaultColor = Console.F" +
                    "oregroundColor;\r\n            Console.ForegroundColor = ConsoleColor.DarkMagenta;" +
                    "\r\n            const string warningTitle = \"WARNING\";\r\n            Console.WriteL" +
                    "ine(\" \");\r\n            Console.WriteLine(warningTitle);\r\n            Console.Wri" +
                    "teLine(new string(\'#\', warningTitle.Length));\r\n            Console.ForegroundCol" +
                    "or = defaultColor;\r\n            foreach (var line in lines)\r\n            {\r\n    " +
                    "            Console.WriteLine(line);\r\n            }\r\n        }\r\n\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ConsoleHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
