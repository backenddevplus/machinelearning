// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace mlnet.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ConsoleHelper : ConsoleHelperBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.Collections.Generic;\r\nusing System.Linq;\r\nusing Micro" +
                    "soft.Data.DataView;\r\nusing Microsoft.ML.Core.Data;\r\nusing Microsoft.ML.Data;\r\n\r\n" +
                    "namespace MlnetSample\r\n{\r\n    public static class ConsoleHelper\r\n    {\r\n        " +
                    "public static void PrintPrediction(string prediction)\r\n        {\r\n            Co" +
                    "nsole.WriteLine($\"*************************************************\");\r\n        " +
                    "    Console.WriteLine($\"Predicted : {prediction}\");\r\n            Console.WriteLi" +
                    "ne($\"*************************************************\");\r\n        }\r\n\r\n        " +
                    "public static void PrintRegressionPredictionVersusObserved(string predictionCoun" +
                    "t, string observedCount)\r\n        {\r\n            Console.WriteLine($\"-----------" +
                    "--------------------------------------\");\r\n            Console.WriteLine($\"Predi" +
                    "cted : {predictionCount}\");\r\n            Console.WriteLine($\"Actual:     {observ" +
                    "edCount}\");\r\n            Console.WriteLine($\"-----------------------------------" +
                    "--------------\");\r\n        }\r\n\r\n        //(CDLTLL-Pending to Fix - Results --> ?" +
                    ")\r\n        //\r\n        public static void PrintRegressionMetrics(string name, Re" +
                    "gressionMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"***********" +
                    "**************************************\");\r\n            Console.WriteLine($\"*    " +
                    "   Metrics for {name} regression model      \");\r\n            Console.WriteLine($" +
                    "\"*------------------------------------------------\");\r\n            Console.Write" +
                    "Line($\"*       LossFn:        {metrics.LossFn:0.##}\");\r\n            Console.Writ" +
                    "eLine($\"*       R2 Score:      {metrics.RSquared:0.##}\");\r\n            Console.W" +
                    "riteLine($\"*       Absolute loss: {metrics.L1:#.##}\");\r\n            Console.Writ" +
                    "eLine($\"*       Squared loss:  {metrics.L2:#.##}\");\r\n            Console.WriteLi" +
                    "ne($\"*       RMS loss:      {metrics.Rms:#.##}\");\r\n            Console.WriteLine" +
                    "($\"*************************************************\");\r\n        }\r\n\r\n        pu" +
                    "blic static void PrintBinaryClassificationMetrics(string name, BinaryClassificat" +
                    "ionMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"****************" +
                    "********************************************\");\r\n            Console.WriteLine($" +
                    "\"*       Metrics for {name} binary classification model      \");\r\n            Co" +
                    "nsole.WriteLine($\"*-----------------------------------------------------------\")" +
                    ";\r\n            Console.WriteLine($\"*       Accuracy: {metrics.Accuracy:P2}\");\r\n " +
                    "           Console.WriteLine($\"*       Auc:      {metrics.Auc:P2}\");\r\n          " +
                    "  Console.WriteLine($\"**********************************************************" +
                    "**\");\r\n        }\r\n\r\n        public static void PrintMultiClassClassificationMetr" +
                    "ics(string name, MultiClassClassifierMetrics metrics)\r\n        {\r\n            Co" +
                    "nsole.WriteLine($\"************************************************************\")" +
                    ";\r\n            Console.WriteLine($\"*    Metrics for {name} multi-class classific" +
                    "ation model   \");\r\n            Console.WriteLine($\"*----------------------------" +
                    "-------------------------------\");\r\n            Console.WriteLine($\"    Accuracy" +
                    "Macro = {metrics.AccuracyMacro:0.####}, a value between 0 and 1, the closer to 1" +
                    ", the better\");\r\n            Console.WriteLine($\"    AccuracyMicro = {metrics.Ac" +
                    "curacyMicro:0.####}, a value between 0 and 1, the closer to 1, the better\");\r\n  " +
                    "          Console.WriteLine($\"    LogLoss = {metrics.LogLoss:0.####}, the closer" +
                    " to 0, the better\");\r\n            Console.WriteLine($\"    LogLoss for class 1 = " +
                    "{metrics.PerClassLogLoss[0]:0.####}, the closer to 0, the better\");\r\n           " +
                    " Console.WriteLine($\"    LogLoss for class 2 = {metrics.PerClassLogLoss[1]:0.###" +
                    "#}, the closer to 0, the better\");\r\n            Console.WriteLine($\"    LogLoss " +
                    "for class 3 = {metrics.PerClassLogLoss[2]:0.####}, the closer to 0, the better\")" +
                    ";\r\n            Console.WriteLine($\"*********************************************" +
                    "***************\");\r\n        }\r\n\r\n        //(CDLTLL-Pending to Fix - Results --> " +
                    "?)\r\n\r\n        public static void PrintRegressionFoldsAverageMetrics(string algor" +
                    "ithmName,\r\n                                                              (Regres" +
                    "sionMetrics metrics,\r\n                                                          " +
                    "     ITransformer model,\r\n                                                      " +
                    "         IDataView scoredTestData)[] crossValidationResults\r\n                   " +
                    "                                          )\r\n        {\r\n            var L1 = cro" +
                    "ssValidationResults.Select(r => r.metrics.L1);\r\n            var L2 = crossValida" +
                    "tionResults.Select(r => r.metrics.L2);\r\n            var RMS = crossValidationRes" +
                    "ults.Select(r => r.metrics.L1);\r\n            var lossFunction = crossValidationR" +
                    "esults.Select(r => r.metrics.LossFn);\r\n            var R2 = crossValidationResul" +
                    "ts.Select(r => r.metrics.RSquared);\r\n\r\n            Console.WriteLine($\"*********" +
                    "********************************************************************************" +
                    "********************\");\r\n            Console.WriteLine($\"*       Metrics for {al" +
                    "gorithmName} Regression model      \");\r\n            Console.WriteLine($\"*-------" +
                    "--------------------------------------------------------------------------------" +
                    "---------------------\");\r\n            Console.WriteLine($\"*       Average L1 Los" +
                    "s:    {L1.Average():0.###} \");\r\n            Console.WriteLine($\"*       Average " +
                    "L2 Loss:    {L2.Average():0.###}  \");\r\n            Console.WriteLine($\"*       A" +
                    "verage RMS:          {RMS.Average():0.###}  \");\r\n            Console.WriteLine($" +
                    "\"*       Average Loss Function: {lossFunction.Average():0.###}  \");\r\n           " +
                    " Console.WriteLine($\"*       Average R-squared: {R2.Average():0.###}  \");\r\n     " +
                    "       Console.WriteLine($\"*****************************************************" +
                    "********************************************************\");\r\n        }\r\n\r\n      " +
                    "  public static void PrintBinaryClassificationFoldsAverageMetrics(\r\n            " +
                    "                             string algorithmName,\r\n                            " +
                    "             (BinaryClassificationMetrics metrics,\r\n                            " +
                    "              ITransformer model,\r\n                                          IDa" +
                    "taView scoredTestData)[] crossValResults\r\n                                      " +
                    "                                     )\r\n        {\r\n            var metricsInMult" +
                    "ipleFolds = crossValResults.Select(r => r.metrics);\r\n\r\n            var AccuracyV" +
                    "alues = metricsInMultipleFolds.Select(m => m.Accuracy);\r\n            var Accurac" +
                    "yAverage = AccuracyValues.Average();\r\n            var AccuraciesStdDeviation = C" +
                    "alculateStandardDeviation(AccuracyValues);\r\n            var AccuraciesConfidence" +
                    "Interval95 = CalculateConfidenceInterval95(AccuracyValues);\r\n\r\n\r\n            Con" +
                    "sole.WriteLine($\"***************************************************************" +
                    "**********************************************\");\r\n            Console.WriteLine" +
                    "($\"*       Metrics for {algorithmName} Binary Classification model      \");\r\n   " +
                    "         Console.WriteLine($\"*--------------------------------------------------" +
                    "----------------------------------------------------------\");\r\n            Conso" +
                    "le.WriteLine($\"*       Average Accuracy:    {AccuracyAverage:0.###}  - Standard " +
                    "deviation: ({AccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({Accura" +
                    "ciesConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"***********" +
                    "********************************************************************************" +
                    "******************\");\r\n\r\n        }\r\n\r\n        public static void PrintMulticlass" +
                    "ClassificationFoldsAverageMetrics(\r\n                                         str" +
                    "ing algorithmName,\r\n                                         (MultiClassClassifi" +
                    "erMetrics metrics,\r\n                                          ITransformer model" +
                    ",\r\n                                          IDataView scoredTestData)[] crossVa" +
                    "lResults\r\n                                                                      " +
                    "     )\r\n        {\r\n            var metricsInMultipleFolds = crossValResults.Sele" +
                    "ct(r => r.metrics);\r\n\r\n            var microAccuracyValues = metricsInMultipleFo" +
                    "lds.Select(m => m.AccuracyMicro);\r\n            var microAccuracyAverage = microA" +
                    "ccuracyValues.Average();\r\n            var microAccuraciesStdDeviation = Calculat" +
                    "eStandardDeviation(microAccuracyValues);\r\n            var microAccuraciesConfide" +
                    "nceInterval95 = CalculateConfidenceInterval95(microAccuracyValues);\r\n\r\n         " +
                    "   var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.AccuracyMacro)" +
                    ";\r\n            var macroAccuracyAverage = macroAccuracyValues.Average();\r\n      " +
                    "      var macroAccuraciesStdDeviation = CalculateStandardDeviation(macroAccuracy" +
                    "Values);\r\n            var macroAccuraciesConfidenceInterval95 = CalculateConfide" +
                    "nceInterval95(macroAccuracyValues);\r\n\r\n            var logLossValues = metricsIn" +
                    "MultipleFolds.Select(m => m.LogLoss);\r\n            var logLossAverage = logLossV" +
                    "alues.Average();\r\n            var logLossStdDeviation = CalculateStandardDeviati" +
                    "on(logLossValues);\r\n            var logLossConfidenceInterval95 = CalculateConfi" +
                    "denceInterval95(logLossValues);\r\n\r\n            var logLossReductionValues = metr" +
                    "icsInMultipleFolds.Select(m => m.LogLossReduction);\r\n            var logLossRedu" +
                    "ctionAverage = logLossReductionValues.Average();\r\n            var logLossReducti" +
                    "onStdDeviation = CalculateStandardDeviation(logLossReductionValues);\r\n          " +
                    "  var logLossReductionConfidenceInterval95 = CalculateConfidenceInterval95(logLo" +
                    "ssReductionValues);\r\n\r\n            Console.WriteLine($\"*************************" +
                    "********************************************************************************" +
                    "****\");\r\n            Console.WriteLine($\"*       Metrics for {algorithmName} Mul" +
                    "ti-class Classification model      \");\r\n            Console.WriteLine($\"*-------" +
                    "--------------------------------------------------------------------------------" +
                    "---------------------\");\r\n            Console.WriteLine($\"*       Average MicroA" +
                    "ccuracy:    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuracie" +
                    "sStdDeviation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInt" +
                    "erval95:#.###})\");\r\n            Console.WriteLine($\"*       Average MacroAccurac" +
                    "y:    {macroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDe" +
                    "viation:#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval9" +
                    "5:#.###})\");\r\n            Console.WriteLine($\"*       Average LogLoss:          " +
                    "{logLossAverage:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - C" +
                    "onfidence Interval 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Co" +
                    "nsole.WriteLine($\"*       Average LogLossReduction: {logLossReductionAverage:#.#" +
                    "##}  - Standard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence " +
                    "Interval 95%: ({logLossReductionConfidenceInterval95:#.###})\");\r\n            Con" +
                    "sole.WriteLine($\"***************************************************************" +
                    "**********************************************\");\r\n\r\n        }\r\n\r\n        public" +
                    " static double CalculateStandardDeviation(IEnumerable<double> values)\r\n        {" +
                    "\r\n            double average = values.Average();\r\n            double sumOfSquare" +
                    "sOfDifferences = values.Select(val => (val - average) * (val - average)).Sum();\r" +
                    "\n            double standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (v" +
                    "alues.Count() - 1));\r\n            return standardDeviation;\r\n        }\r\n\r\n      " +
                    "  public static double CalculateConfidenceInterval95(IEnumerable<double> values)" +
                    "\r\n        {\r\n            double confidenceInterval95 = 1.96 * CalculateStandardD" +
                    "eviation(values) / Math.Sqrt((values.Count() - 1));\r\n            return confiden" +
                    "ceInterval95;\r\n        }\r\n\r\n        public static void PrintClusteringMetrics(st" +
                    "ring name, ClusteringMetrics metrics)\r\n        {\r\n            Console.WriteLine(" +
                    "$\"*************************************************\");\r\n            Console.Writ" +
                    "eLine($\"*       Metrics for {name} clustering model      \");\r\n            Consol" +
                    "e.WriteLine($\"*------------------------------------------------\");\r\n            " +
                    "Console.WriteLine($\"*       AvgMinScore: {metrics.AvgMinScore}\");\r\n            C" +
                    "onsole.WriteLine($\"*       DBI is: {metrics.Dbi}\");\r\n            Console.WriteLi" +
                    "ne($\"*************************************************\");\r\n        }\r\n\r\n        " +
                    "public static void ConsoleWriteHeader(params string[] lines)\r\n        {\r\n       " +
                    "     var defaultColor = Console.ForegroundColor;\r\n            Console.Foreground" +
                    "Color = ConsoleColor.Yellow;\r\n            Console.WriteLine(\" \");\r\n            f" +
                    "oreach (var line in lines)\r\n            {\r\n                Console.WriteLine(lin" +
                    "e);\r\n            }\r\n            var maxLength = lines.Select(x => x.Length).Max(" +
                    ");\r\n            Console.WriteLine(new string(\'#\', maxLength));\r\n            Cons" +
                    "ole.ForegroundColor = defaultColor;\r\n        }\r\n\r\n        public static void Con" +
                    "soleWriterSection(params string[] lines)\r\n        {\r\n            var defaultColo" +
                    "r = Console.ForegroundColor;\r\n            Console.ForegroundColor = ConsoleColor" +
                    ".Blue;\r\n            Console.WriteLine(\" \");\r\n            foreach (var line in li" +
                    "nes)\r\n            {\r\n                Console.WriteLine(line);\r\n            }\r\n  " +
                    "          var maxLength = lines.Select(x => x.Length).Max();\r\n            Consol" +
                    "e.WriteLine(new string(\'-\', maxLength));\r\n            Console.ForegroundColor = " +
                    "defaultColor;\r\n        }\r\n\r\n        public static void ConsolePressAnyKey()\r\n   " +
                    "     {\r\n            var defaultColor = Console.ForegroundColor;\r\n            Con" +
                    "sole.ForegroundColor = ConsoleColor.Green;\r\n            Console.WriteLine(\" \");\r" +
                    "\n            Console.WriteLine(\"Press any key to finish.\");\r\n            Console" +
                    ".ReadKey();\r\n        }\r\n\r\n        public static void ConsoleWriteException(param" +
                    "s string[] lines)\r\n        {\r\n            var defaultColor = Console.ForegroundC" +
                    "olor;\r\n            Console.ForegroundColor = ConsoleColor.Red;\r\n            cons" +
                    "t string exceptionTitle = \"EXCEPTION\";\r\n            Console.WriteLine(\" \");\r\n   " +
                    "         Console.WriteLine(exceptionTitle);\r\n            Console.WriteLine(new s" +
                    "tring(\'#\', exceptionTitle.Length));\r\n            Console.ForegroundColor = defau" +
                    "ltColor;\r\n            foreach (var line in lines)\r\n            {\r\n              " +
                    "  Console.WriteLine(line);\r\n            }\r\n        }\r\n\r\n        public static vo" +
                    "id ConsoleWriteWarning(params string[] lines)\r\n        {\r\n            var defaul" +
                    "tColor = Console.ForegroundColor;\r\n            Console.ForegroundColor = Console" +
                    "Color.DarkMagenta;\r\n            const string warningTitle = \"WARNING\";\r\n        " +
                    "    Console.WriteLine(\" \");\r\n            Console.WriteLine(warningTitle);\r\n     " +
                    "       Console.WriteLine(new string(\'#\', warningTitle.Length));\r\n            Con" +
                    "sole.ForegroundColor = defaultColor;\r\n            foreach (var line in lines)\r\n " +
                    "           {\r\n                Console.WriteLine(line);\r\n            }\r\n        }" +
                    "\r\n\r\n    }\r\n}");
            return this.GenerationEnvironment.ToString();
        }
    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ConsoleHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
