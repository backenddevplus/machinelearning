// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.ML.CLI.Templates.Console
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ConsoleHelper : ConsoleHelperBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Train\r\n{\r\n    public static class ConsoleHelper\r\n    {\r\n\r\n        public static " +
                    "void PrintRegressionMetrics(RegressionMetrics metrics)\r\n        {\r\n            C" +
                    "onsole.WriteLine($\"*************************************************\");\r\n       " +
                    "     Console.WriteLine($\"*       Metrics for regression model      \");\r\n        " +
                    "    Console.WriteLine($\"*------------------------------------------------\");\r\n  " +
                    "          Console.WriteLine($\"*       LossFn:        {metrics.LossFn:0.##}\");\r\n " +
                    "           Console.WriteLine($\"*       R2 Score:      {metrics.RSquared:0.##}\");" +
                    "\r\n            Console.WriteLine($\"*       Absolute loss: {metrics.L1:#.##}\");\r\n " +
                    "           Console.WriteLine($\"*       Squared loss:  {metrics.L2:#.##}\");\r\n    " +
                    "        Console.WriteLine($\"*       RMS loss:      {metrics.Rms:#.##}\");\r\n      " +
                    "      Console.WriteLine($\"*************************************************\");\r\n" +
                    "        }\r\n\r\n        public static void PrintRegressionFoldsAverageMetrics(Train" +
                    "CatalogBase.CrossValidationResult<RegressionMetrics>[] crossValidationResults)\r\n" +
                    "        {\r\n            var L1 = crossValidationResults.Select(r => r.Metrics.L1)" +
                    ";\r\n            var L2 = crossValidationResults.Select(r => r.Metrics.L2);\r\n     " +
                    "       var RMS = crossValidationResults.Select(r => r.Metrics.L1);\r\n            " +
                    "var lossFunction = crossValidationResults.Select(r => r.Metrics.LossFn);\r\n      " +
                    "      var R2 = crossValidationResults.Select(r => r.Metrics.RSquared);\r\n\r\n      " +
                    "      Console.WriteLine($\"******************************************************" +
                    "*******************************************************\");\r\n            Console." +
                    "WriteLine($\"*       Metrics for Regression model      \");\r\n            Console.W" +
                    "riteLine($\"*--------------------------------------------------------------------" +
                    "----------------------------------------\");\r\n            Console.WriteLine($\"*  " +
                    "     Average L1 Loss:    {L1.Average():0.###} \");\r\n            Console.WriteLine" +
                    "($\"*       Average L2 Loss:    {L2.Average():0.###}  \");\r\n            Console.Wr" +
                    "iteLine($\"*       Average RMS:          {RMS.Average():0.###}  \");\r\n            " +
                    "Console.WriteLine($\"*       Average Loss Function: {lossFunction.Average():0.###" +
                    "}  \");\r\n            Console.WriteLine($\"*       Average R-squared: {R2.Average()" +
                    ":0.###}  \");\r\n            Console.WriteLine($\"**********************************" +
                    "***************************************************************************\");\r\n" +
                    "        }\r\n\r\n        public static void PrintBinaryClassificationMetrics(BinaryC" +
                    "lassificationMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"******" +
                    "******************************************************\");\r\n            Console.W" +
                    "riteLine($\"*       Metrics for binary classification model      \");\r\n           " +
                    " Console.WriteLine($\"*----------------------------------------------------------" +
                    "-\");\r\n            Console.WriteLine($\"*       Accuracy: {metrics.Accuracy:P2}\");" +
                    "\r\n            Console.WriteLine($\"*       Auc:      {metrics.Auc:P2}\");\r\n       " +
                    "     Console.WriteLine($\"*******************************************************" +
                    "*****\");\r\n        }\r\n\r\n\r\n        public static void PrintBinaryClassificationFol" +
                    "dsAverageMetrics(TrainCatalogBase.CrossValidationResult<BinaryClassificationMetr" +
                    "ics>[] crossValResults)\r\n        {\r\n            var metricsInMultipleFolds = cro" +
                    "ssValResults.Select(r => r.Metrics);\r\n\r\n            var AccuracyValues = metrics" +
                    "InMultipleFolds.Select(m => m.Accuracy);\r\n            var AccuracyAverage = Accu" +
                    "racyValues.Average();\r\n            var AccuraciesStdDeviation = CalculateStandar" +
                    "dDeviation(AccuracyValues);\r\n            var AccuraciesConfidenceInterval95 = Ca" +
                    "lculateConfidenceInterval95(AccuracyValues);\r\n\r\n\r\n            Console.WriteLine(" +
                    "$\"******************************************************************************" +
                    "*******************************\");\r\n            Console.WriteLine($\"*       Metr" +
                    "ics for Binary Classification model      \");\r\n            Console.WriteLine($\"*-" +
                    "--------------------------------------------------------------------------------" +
                    "---------------------------\");\r\n            Console.WriteLine($\"*       Average " +
                    "Accuracy:    {AccuracyAverage:0.###}  - Standard deviation: ({AccuraciesStdDevia" +
                    "tion:#.###})  - Confidence Interval 95%: ({AccuraciesConfidenceInterval95:#.###}" +
                    ")\");\r\n            Console.WriteLine($\"******************************************" +
                    "*******************************************************************\");\r\n\r\n      " +
                    "  }\r\n\r\n        public static void PrintMultiClassClassificationMetrics(MultiClas" +
                    "sClassifierMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"********" +
                    "****************************************************\");\r\n            Console.Wri" +
                    "teLine($\"*    Metrics for multi-class classification model   \");\r\n            Co" +
                    "nsole.WriteLine($\"*-----------------------------------------------------------\")" +
                    ";\r\n            Console.WriteLine($\"    AccuracyMacro = {metrics.AccuracyMacro:0." +
                    "####}, a value between 0 and 1, the closer to 1, the better\");\r\n            Cons" +
                    "ole.WriteLine($\"    AccuracyMicro = {metrics.AccuracyMicro:0.####}, a value betw" +
                    "een 0 and 1, the closer to 1, the better\");\r\n            Console.WriteLine($\"   " +
                    " LogLoss = {metrics.LogLoss:0.####}, the closer to 0, the better\");\r\n           " +
                    " for (int i = 0; i < metrics.PerClassLogLoss.Length; i++)\r\n            {\r\n      " +
                    "          Console.WriteLine($\"    LogLoss for class {i + 1} = {metrics.PerClassL" +
                    "ogLoss[i]:0.####}, the closer to 0, the better\");\r\n            }\r\n            Co" +
                    "nsole.WriteLine($\"************************************************************\")" +
                    ";\r\n        }\r\n\r\n        public static void PrintMulticlassClassificationFoldsAve" +
                    "rageMetrics(TrainCatalogBase.CrossValidationResult<MultiClassClassifierMetrics>[" +
                    "] crossValResults)\r\n        {\r\n            var metricsInMultipleFolds = crossVal" +
                    "Results.Select(r => r.Metrics);\r\n\r\n            var microAccuracyValues = metrics" +
                    "InMultipleFolds.Select(m => m.AccuracyMicro);\r\n            var microAccuracyAver" +
                    "age = microAccuracyValues.Average();\r\n            var microAccuraciesStdDeviatio" +
                    "n = CalculateStandardDeviation(microAccuracyValues);\r\n            var microAccur" +
                    "aciesConfidenceInterval95 = CalculateConfidenceInterval95(microAccuracyValues);\r" +
                    "\n\r\n            var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.Ac" +
                    "curacyMacro);\r\n            var macroAccuracyAverage = macroAccuracyValues.Averag" +
                    "e();\r\n            var macroAccuraciesStdDeviation = CalculateStandardDeviation(m" +
                    "acroAccuracyValues);\r\n            var macroAccuraciesConfidenceInterval95 = Calc" +
                    "ulateConfidenceInterval95(macroAccuracyValues);\r\n\r\n            var logLossValues" +
                    " = metricsInMultipleFolds.Select(m => m.LogLoss);\r\n            var logLossAverag" +
                    "e = logLossValues.Average();\r\n            var logLossStdDeviation = CalculateSta" +
                    "ndardDeviation(logLossValues);\r\n            var logLossConfidenceInterval95 = Ca" +
                    "lculateConfidenceInterval95(logLossValues);\r\n\r\n            var logLossReductionV" +
                    "alues = metricsInMultipleFolds.Select(m => m.LogLossReduction);\r\n            var" +
                    " logLossReductionAverage = logLossReductionValues.Average();\r\n            var lo" +
                    "gLossReductionStdDeviation = CalculateStandardDeviation(logLossReductionValues);" +
                    "\r\n            var logLossReductionConfidenceInterval95 = CalculateConfidenceInte" +
                    "rval95(logLossReductionValues);\r\n\r\n            Console.WriteLine($\"*************" +
                    "********************************************************************************" +
                    "****************\");\r\n            Console.WriteLine($\"*       Metrics for Multi-c" +
                    "lass Classification model      \");\r\n            Console.WriteLine($\"*-----------" +
                    "--------------------------------------------------------------------------------" +
                    "-----------------\");\r\n            Console.WriteLine($\"*       Average MicroAccur" +
                    "acy:    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStd" +
                    "Deviation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterva" +
                    "l95:#.###})\");\r\n            Console.WriteLine($\"*       Average MacroAccuracy:  " +
                    "  {macroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviat" +
                    "ion:#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#." +
                    "###})\");\r\n            Console.WriteLine($\"*       Average LogLoss:          {log" +
                    "LossAverage:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confi" +
                    "dence Interval 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Consol" +
                    "e.WriteLine($\"*       Average LogLossReduction: {logLossReductionAverage:#.###} " +
                    " - Standard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Inte" +
                    "rval 95%: ({logLossReductionConfidenceInterval95:#.###})\");\r\n            Console" +
                    ".WriteLine($\"*******************************************************************" +
                    "******************************************\");\r\n\r\n        }\r\n\r\n        public sta" +
                    "tic double CalculateStandardDeviation(IEnumerable<double> values)\r\n        {\r\n  " +
                    "          double average = values.Average();\r\n            double sumOfSquaresOfD" +
                    "ifferences = values.Select(val => (val - average) * (val - average)).Sum();\r\n   " +
                    "         double standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (value" +
                    "s.Count() - 1));\r\n            return standardDeviation;\r\n        }\r\n\r\n        pu" +
                    "blic static double CalculateConfidenceInterval95(IEnumerable<double> values)\r\n  " +
                    "      {\r\n            double confidenceInterval95 = 1.96 * CalculateStandardDevia" +
                    "tion(values) / Math.Sqrt((values.Count() - 1));\r\n            return confidenceIn" +
                    "terval95;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public string Namespace {get;set;}

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ConsoleHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
