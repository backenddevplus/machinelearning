// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.ML.CLI.Templates.Console
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ConsoleHelper : ConsoleHelperBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write(".Train\r\n{\r\n    public static class ConsoleHelper\r\n    {\r\n\r\n        public static " +
                    "void PrintRegressionMetrics(RegressionMetrics metrics)\r\n        {\r\n            C" +
                    "onsole.WriteLine($\"*************************************************\");\r\n       " +
                    "     Console.WriteLine($\"*       Metrics for regression model      \");\r\n        " +
                    "    Console.WriteLine($\"*------------------------------------------------\");\r\n  " +
                    "          Console.WriteLine($\"*       LossFn:        {metrics.LossFunction:0.##}" +
                    "\");\r\n            Console.WriteLine($\"*       R2 Score:      {metrics.RSquared:0." +
                    "##}\");\r\n            Console.WriteLine($\"*       Absolute loss: {metrics.MeanAbso" +
                    "luteError:#.##}\");\r\n            Console.WriteLine($\"*       Squared loss:  {metr" +
                    "ics.MeanSquaredError:#.##}\");\r\n            Console.WriteLine($\"*       RMS loss:" +
                    "      {metrics.RootMeanSquaredError:#.##}\");\r\n            Console.WriteLine($\"**" +
                    "***********************************************\");\r\n        }\r\n\r\n        public " +
                    "static void PrintRegressionFoldsAverageMetrics(IEnumerable<TrainCatalogBase.Cros" +
                    "sValidationResult<RegressionMetrics>> crossValidationResults)\r\n        {\r\n      " +
                    "      var L1 = crossValidationResults.Select(r => r.Metrics.MeanAbsoluteError);\r" +
                    "\n            var L2 = crossValidationResults.Select(r => r.Metrics.MeanSquaredEr" +
                    "ror);\r\n            var RMS = crossValidationResults.Select(r => r.Metrics.MeanAb" +
                    "soluteError);\r\n            var lossFunction = crossValidationResults.Select(r =>" +
                    " r.Metrics.LossFunction);\r\n            var R2 = crossValidationResults.Select(r " +
                    "=> r.Metrics.RSquared);\r\n\r\n            Console.WriteLine($\"*********************" +
                    "********************************************************************************" +
                    "********\");\r\n            Console.WriteLine($\"*       Metrics for Regression mode" +
                    "l      \");\r\n            Console.WriteLine($\"*-----------------------------------" +
                    "-------------------------------------------------------------------------\");\r\n  " +
                    "          Console.WriteLine($\"*       Average L1 Loss:    {L1.Average():0.###} \"" +
                    ");\r\n            Console.WriteLine($\"*       Average L2 Loss:    {L2.Average():0." +
                    "###}  \");\r\n            Console.WriteLine($\"*       Average RMS:          {RMS.Av" +
                    "erage():0.###}  \");\r\n            Console.WriteLine($\"*       Average Loss Functi" +
                    "on: {lossFunction.Average():0.###}  \");\r\n            Console.WriteLine($\"*      " +
                    " Average R-squared: {R2.Average():0.###}  \");\r\n            Console.WriteLine($\"*" +
                    "********************************************************************************" +
                    "****************************\");\r\n        }\r\n\r\n        public static void PrintBi" +
                    "naryClassificationMetrics(BinaryClassificationMetrics metrics)\r\n        {\r\n     " +
                    "       Console.WriteLine($\"*****************************************************" +
                    "*******\");\r\n            Console.WriteLine($\"*       Metrics for binary classific" +
                    "ation model      \");\r\n            Console.WriteLine($\"*-------------------------" +
                    "----------------------------------\");\r\n            Console.WriteLine($\"*       A" +
                    "ccuracy: {metrics.Accuracy:P2}\");\r\n            Console.WriteLine($\"*       Auc: " +
                    "     {metrics.AreaUnderRocCurve:P2}\");\r\n            Console.WriteLine($\"********" +
                    "****************************************************\");\r\n        }\r\n\r\n\r\n        " +
                    "public static void PrintBinaryClassificationFoldsAverageMetrics(IEnumerable<Trai" +
                    "nCatalogBase.CrossValidationResult<BinaryClassificationMetrics>> crossValResults" +
                    ")\r\n        {\r\n            var metricsInMultipleFolds = crossValResults.Select(r " +
                    "=> r.Metrics);\r\n\r\n            var AccuracyValues = metricsInMultipleFolds.Select" +
                    "(m => m.Accuracy);\r\n            var AccuracyAverage = AccuracyValues.Average();\r" +
                    "\n            var AccuraciesStdDeviation = CalculateStandardDeviation(AccuracyVal" +
                    "ues);\r\n            var AccuraciesConfidenceInterval95 = CalculateConfidenceInter" +
                    "val95(AccuracyValues);\r\n\r\n\r\n            Console.WriteLine($\"********************" +
                    "********************************************************************************" +
                    "*********\");\r\n            Console.WriteLine($\"*       Metrics for Binary Classif" +
                    "ication model      \");\r\n            Console.WriteLine($\"*-----------------------" +
                    "--------------------------------------------------------------------------------" +
                    "-----\");\r\n            Console.WriteLine($\"*       Average Accuracy:    {Accuracy" +
                    "Average:0.###}  - Standard deviation: ({AccuraciesStdDeviation:#.###})  - Confid" +
                    "ence Interval 95%: ({AccuraciesConfidenceInterval95:#.###})\");\r\n            Cons" +
                    "ole.WriteLine($\"****************************************************************" +
                    "*********************************************\");\r\n\r\n        }\r\n\r\n        public " +
                    "static void PrintMulticlassClassificationMetrics(MulticlassClassificationMetrics" +
                    " metrics)\r\n        {\r\n            Console.WriteLine($\"**************************" +
                    "**********************************\");\r\n            Console.WriteLine($\"*    Metr" +
                    "ics for multi-class classification model   \");\r\n            Console.WriteLine($\"" +
                    "*-----------------------------------------------------------\");\r\n            Con" +
                    "sole.WriteLine($\"    MacroAccuracy = {metrics.MacroAccuracy:0.####}, a value bet" +
                    "ween 0 and 1, the closer to 1, the better\");\r\n            Console.WriteLine($\"  " +
                    "  MicroAccuracy = {metrics.MicroAccuracy:0.####}, a value between 0 and 1, the c" +
                    "loser to 1, the better\");\r\n            Console.WriteLine($\"    LogLoss = {metric" +
                    "s.LogLoss:0.####}, the closer to 0, the better\");\r\n            for (int i = 0; i" +
                    " < metrics.PerClassLogLoss.Count; i++)\r\n            {\r\n                Console.W" +
                    "riteLine($\"    LogLoss for class {i + 1} = {metrics.PerClassLogLoss[i]:0.####}, " +
                    "the closer to 0, the better\");\r\n            }\r\n            Console.WriteLine($\"*" +
                    "***********************************************************\");\r\n        }\r\n\r\n   " +
                    "     public static void PrintMulticlassClassificationFoldsAverageMetrics(IEnumer" +
                    "able<TrainCatalogBase.CrossValidationResult<MulticlassClassificationMetrics>> cr" +
                    "ossValResults)\r\n        {\r\n            var metricsInMultipleFolds = crossValResu" +
                    "lts.Select(r => r.Metrics);\r\n\r\n            var microAccuracyValues = metricsInMu" +
                    "ltipleFolds.Select(m => m.MicroAccuracy);\r\n            var microAccuracyAverage " +
                    "= microAccuracyValues.Average();\r\n            var microAccuraciesStdDeviation = " +
                    "CalculateStandardDeviation(microAccuracyValues);\r\n            var microAccuracie" +
                    "sConfidenceInterval95 = CalculateConfidenceInterval95(microAccuracyValues);\r\n\r\n " +
                    "           var macroAccuracyValues = metricsInMultipleFolds.Select(m => m.MacroA" +
                    "ccuracy);\r\n            var macroAccuracyAverage = macroAccuracyValues.Average();" +
                    "\r\n            var macroAccuraciesStdDeviation = CalculateStandardDeviation(macro" +
                    "AccuracyValues);\r\n            var macroAccuraciesConfidenceInterval95 = Calculat" +
                    "eConfidenceInterval95(macroAccuracyValues);\r\n\r\n            var logLossValues = m" +
                    "etricsInMultipleFolds.Select(m => m.LogLoss);\r\n            var logLossAverage = " +
                    "logLossValues.Average();\r\n            var logLossStdDeviation = CalculateStandar" +
                    "dDeviation(logLossValues);\r\n            var logLossConfidenceInterval95 = Calcul" +
                    "ateConfidenceInterval95(logLossValues);\r\n\r\n            var logLossReductionValue" +
                    "s = metricsInMultipleFolds.Select(m => m.LogLossReduction);\r\n            var log" +
                    "LossReductionAverage = logLossReductionValues.Average();\r\n            var logLos" +
                    "sReductionStdDeviation = CalculateStandardDeviation(logLossReductionValues);\r\n  " +
                    "          var logLossReductionConfidenceInterval95 = CalculateConfidenceInterval" +
                    "95(logLossReductionValues);\r\n\r\n            Console.WriteLine($\"*****************" +
                    "********************************************************************************" +
                    "************\");\r\n            Console.WriteLine($\"*       Metrics for Multi-class" +
                    " Classification model      \");\r\n            Console.WriteLine($\"*---------------" +
                    "--------------------------------------------------------------------------------" +
                    "-------------\");\r\n            Console.WriteLine($\"*       Average MicroAccuracy:" +
                    "    {microAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDevi" +
                    "ation:#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:" +
                    "#.###})\");\r\n            Console.WriteLine($\"*       Average MacroAccuracy:    {m" +
                    "acroAccuracyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:" +
                    "#.###})  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###}" +
                    ")\");\r\n            Console.WriteLine($\"*       Average LogLoss:          {logLoss" +
                    "Average:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidenc" +
                    "e Interval 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Console.Wr" +
                    "iteLine($\"*       Average LogLossReduction: {logLossReductionAverage:#.###}  - S" +
                    "tandard deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval" +
                    " 95%: ({logLossReductionConfidenceInterval95:#.###})\");\r\n            Console.Wri" +
                    "teLine($\"***********************************************************************" +
                    "**************************************\");\r\n\r\n        }\r\n\r\n        public static " +
                    "double CalculateStandardDeviation(IEnumerable<double> values)\r\n        {\r\n      " +
                    "      double average = values.Average();\r\n            double sumOfSquaresOfDiffe" +
                    "rences = values.Select(val => (val - average) * (val - average)).Sum();\r\n       " +
                    "     double standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (values.Co" +
                    "unt() - 1));\r\n            return standardDeviation;\r\n        }\r\n\r\n        public" +
                    " static double CalculateConfidenceInterval95(IEnumerable<double> values)\r\n      " +
                    "  {\r\n            double confidenceInterval95 = 1.96 * CalculateStandardDeviation" +
                    "(values) / Math.Sqrt((values.Count() - 1));\r\n            return confidenceInterv" +
                    "al95;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public string Namespace {get;set;}

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ConsoleHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
