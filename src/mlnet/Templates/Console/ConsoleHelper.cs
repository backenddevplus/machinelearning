// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace Microsoft.ML.CLI.Templates.Console
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class ConsoleHelper : ConsoleHelperBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.Collections.Generic;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;

namespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture(Namespace));
            this.Write("\r\n{\r\n    public static class ConsoleHelper\r\n    {\r\n        public static void Pri" +
                    "ntPrediction(string prediction)\r\n        {\r\n            Console.WriteLine($\"****" +
                    "*********************************************\");\r\n            Console.WriteLine(" +
                    "$\"Predicted : {prediction}\");\r\n            Console.WriteLine($\"*****************" +
                    "********************************\");\r\n        }\r\n\r\n        public static void Pri" +
                    "ntRegressionPredictionVersusObserved(string predictionCount, string observedCoun" +
                    "t)\r\n        {\r\n            Console.WriteLine($\"---------------------------------" +
                    "----------------\");\r\n            Console.WriteLine($\"Predicted : {predictionCoun" +
                    "t}\");\r\n            Console.WriteLine($\"Actual:     {observedCount}\");\r\n         " +
                    "   Console.WriteLine($\"-------------------------------------------------\");\r\n   " +
                    "     }\r\n\r\n        public static void PrintRegressionMetrics(string name, Regress" +
                    "ionMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"****************" +
                    "*********************************\");\r\n            Console.WriteLine($\"*       Me" +
                    "trics for {name} regression model      \");\r\n            Console.WriteLine($\"*---" +
                    "---------------------------------------------\");\r\n            Console.WriteLine(" +
                    "$\"*       LossFn:        {metrics.LossFn:0.##}\");\r\n            Console.WriteLine" +
                    "($\"*       R2 Score:      {metrics.RSquared:0.##}\");\r\n            Console.WriteL" +
                    "ine($\"*       Absolute loss: {metrics.L1:#.##}\");\r\n            Console.WriteLine" +
                    "($\"*       Squared loss:  {metrics.L2:#.##}\");\r\n            Console.WriteLine($\"" +
                    "*       RMS loss:      {metrics.Rms:#.##}\");\r\n            Console.WriteLine($\"**" +
                    "***********************************************\");\r\n        }\r\n\r\n        public " +
                    "static void PrintBinaryClassificationMetrics(string name, BinaryClassificationMe" +
                    "trics metrics)\r\n        {\r\n            Console.WriteLine($\"*********************" +
                    "***************************************\");\r\n            Console.WriteLine($\"*   " +
                    "    Metrics for {name} binary classification model      \");\r\n            Console" +
                    ".WriteLine($\"*-----------------------------------------------------------\");\r\n  " +
                    "          Console.WriteLine($\"*       Accuracy: {metrics.Accuracy:P2}\");\r\n      " +
                    "      Console.WriteLine($\"*       Auc:      {metrics.Auc:P2}\");\r\n            Con" +
                    "sole.WriteLine($\"************************************************************\");" +
                    "\r\n        }\r\n\r\n        public static void PrintRegressionFoldsAverageMetrics(str" +
                    "ing algorithmName,\r\n                                                            " +
                    " TrainCatalogBase.CrossValidationResult<RegressionMetrics>[] crossValidationResu" +
                    "lts\r\n                                                             )\r\n        {\r\n" +
                    "            var L1 = crossValidationResults.Select(r => r.Metrics.L1);\r\n        " +
                    "    var L2 = crossValidationResults.Select(r => r.Metrics.L2);\r\n            var " +
                    "RMS = crossValidationResults.Select(r => r.Metrics.L1);\r\n            var lossFun" +
                    "ction = crossValidationResults.Select(r => r.Metrics.LossFn);\r\n            var R" +
                    "2 = crossValidationResults.Select(r => r.Metrics.RSquared);\r\n\r\n            Conso" +
                    "le.WriteLine($\"*****************************************************************" +
                    "********************************************\");\r\n            Console.WriteLine($" +
                    "\"*       Metrics for {algorithmName} Regression model      \");\r\n            Cons" +
                    "ole.WriteLine($\"*---------------------------------------------------------------" +
                    "---------------------------------------------\");\r\n            Console.WriteLine(" +
                    "$\"*       Average L1 Loss:    {L1.Average():0.###} \");\r\n            Console.Writ" +
                    "eLine($\"*       Average L2 Loss:    {L2.Average():0.###}  \");\r\n            Conso" +
                    "le.WriteLine($\"*       Average RMS:          {RMS.Average():0.###}  \");\r\n       " +
                    "     Console.WriteLine($\"*       Average Loss Function: {lossFunction.Average():" +
                    "0.###}  \");\r\n            Console.WriteLine($\"*       Average R-squared: {R2.Aver" +
                    "age():0.###}  \");\r\n            Console.WriteLine($\"*****************************" +
                    "********************************************************************************" +
                    "\");\r\n        }\r\n\r\n        public static void PrintBinaryClassificationFoldsAvera" +
                    "geMetrics(\r\n                                         string algorithmName,\r\n    " +
                    "                                     TrainCatalogBase.CrossValidationResult<Bina" +
                    "ryClassificationMetrics>[] crossValResults)\r\n        {\r\n            var metricsI" +
                    "nMultipleFolds = crossValResults.Select(r => r.Metrics);\r\n\r\n            var Accu" +
                    "racyValues = metricsInMultipleFolds.Select(m => m.Accuracy);\r\n            var Ac" +
                    "curacyAverage = AccuracyValues.Average();\r\n            var AccuraciesStdDeviatio" +
                    "n = CalculateStandardDeviation(AccuracyValues);\r\n            var AccuraciesConfi" +
                    "denceInterval95 = CalculateConfidenceInterval95(AccuracyValues);\r\n\r\n\r\n          " +
                    "  Console.WriteLine($\"**********************************************************" +
                    "***************************************************\");\r\n            Console.Writ" +
                    "eLine($\"*       Metrics for {algorithmName} Binary Classification model      \");" +
                    "\r\n            Console.WriteLine($\"*---------------------------------------------" +
                    "---------------------------------------------------------------\");\r\n            " +
                    "Console.WriteLine($\"*       Average Accuracy:    {AccuracyAverage:0.###}  - Stan" +
                    "dard deviation: ({AccuraciesStdDeviation:#.###})  - Confidence Interval 95%: ({A" +
                    "ccuraciesConfidenceInterval95:#.###})\");\r\n            Console.WriteLine($\"******" +
                    "********************************************************************************" +
                    "***********************\");\r\n\r\n        }\r\n\r\n        public static void PrintMulti" +
                    "classClassificationFoldsAverageMetrics(\r\n                                       " +
                    "  string algorithmName,\r\n                                         TrainCatalogBa" +
                    "se.CrossValidationResult<MultiClassClassifierMetrics>[] crossValResults)\r\n      " +
                    "  {\r\n            var metricsInMultipleFolds = crossValResults.Select(r => r.Metr" +
                    "ics);\r\n\r\n            var microAccuracyValues = metricsInMultipleFolds.Select(m =" +
                    "> m.AccuracyMicro);\r\n            var microAccuracyAverage = microAccuracyValues." +
                    "Average();\r\n            var microAccuraciesStdDeviation = CalculateStandardDevia" +
                    "tion(microAccuracyValues);\r\n            var microAccuraciesConfidenceInterval95 " +
                    "= CalculateConfidenceInterval95(microAccuracyValues);\r\n\r\n            var macroAc" +
                    "curacyValues = metricsInMultipleFolds.Select(m => m.AccuracyMacro);\r\n           " +
                    " var macroAccuracyAverage = macroAccuracyValues.Average();\r\n            var macr" +
                    "oAccuraciesStdDeviation = CalculateStandardDeviation(macroAccuracyValues);\r\n    " +
                    "        var macroAccuraciesConfidenceInterval95 = CalculateConfidenceInterval95(" +
                    "macroAccuracyValues);\r\n\r\n            var logLossValues = metricsInMultipleFolds." +
                    "Select(m => m.LogLoss);\r\n            var logLossAverage = logLossValues.Average(" +
                    ");\r\n            var logLossStdDeviation = CalculateStandardDeviation(logLossValu" +
                    "es);\r\n            var logLossConfidenceInterval95 = CalculateConfidenceInterval9" +
                    "5(logLossValues);\r\n\r\n            var logLossReductionValues = metricsInMultipleF" +
                    "olds.Select(m => m.LogLossReduction);\r\n            var logLossReductionAverage =" +
                    " logLossReductionValues.Average();\r\n            var logLossReductionStdDeviation" +
                    " = CalculateStandardDeviation(logLossReductionValues);\r\n            var logLossR" +
                    "eductionConfidenceInterval95 = CalculateConfidenceInterval95(logLossReductionVal" +
                    "ues);\r\n\r\n            Console.WriteLine($\"***************************************" +
                    "**********************************************************************\");\r\n     " +
                    "       Console.WriteLine($\"*       Metrics for {algorithmName} Multi-class Class" +
                    "ification model      \");\r\n            Console.WriteLine($\"*---------------------" +
                    "--------------------------------------------------------------------------------" +
                    "-------\");\r\n            Console.WriteLine($\"*       Average MicroAccuracy:    {m" +
                    "icroAccuracyAverage:0.###}  - Standard deviation: ({microAccuraciesStdDeviation:" +
                    "#.###})  - Confidence Interval 95%: ({microAccuraciesConfidenceInterval95:#.###}" +
                    ")\");\r\n            Console.WriteLine($\"*       Average MacroAccuracy:    {macroAc" +
                    "curacyAverage:0.###}  - Standard deviation: ({macroAccuraciesStdDeviation:#.###}" +
                    ")  - Confidence Interval 95%: ({macroAccuraciesConfidenceInterval95:#.###})\");\r\n" +
                    "            Console.WriteLine($\"*       Average LogLoss:          {logLossAverag" +
                    "e:#.###}  - Standard deviation: ({logLossStdDeviation:#.###})  - Confidence Inte" +
                    "rval 95%: ({logLossConfidenceInterval95:#.###})\");\r\n            Console.WriteLin" +
                    "e($\"*       Average LogLossReduction: {logLossReductionAverage:#.###}  - Standar" +
                    "d deviation: ({logLossReductionStdDeviation:#.###})  - Confidence Interval 95%: " +
                    "({logLossReductionConfidenceInterval95:#.###})\");\r\n            Console.WriteLine" +
                    "($\"*****************************************************************************" +
                    "********************************\");\r\n\r\n        }\r\n\r\n        public static double" +
                    " CalculateStandardDeviation(IEnumerable<double> values)\r\n        {\r\n            " +
                    "double average = values.Average();\r\n            double sumOfSquaresOfDifferences" +
                    " = values.Select(val => (val - average) * (val - average)).Sum();\r\n            d" +
                    "ouble standardDeviation = Math.Sqrt(sumOfSquaresOfDifferences / (values.Count() " +
                    "- 1));\r\n            return standardDeviation;\r\n        }\r\n\r\n        public stati" +
                    "c double CalculateConfidenceInterval95(IEnumerable<double> values)\r\n        {\r\n " +
                    "           double confidenceInterval95 = 1.96 * CalculateStandardDeviation(value" +
                    "s) / Math.Sqrt((values.Count() - 1));\r\n            return confidenceInterval95;\r" +
                    "\n        }\r\n\r\n        public static void PrintClusteringMetrics(string name, Clu" +
                    "steringMetrics metrics)\r\n        {\r\n            Console.WriteLine($\"************" +
                    "*************************************\");\r\n            Console.WriteLine($\"*     " +
                    "  Metrics for {name} clustering model      \");\r\n            Console.WriteLine($\"" +
                    "*------------------------------------------------\");\r\n            Console.WriteL" +
                    "ine($\"*       AvgMinScore: {metrics.AvgMinScore}\");\r\n            Console.WriteLi" +
                    "ne($\"*       DBI is: {metrics.Dbi}\");\r\n            Console.WriteLine($\"*********" +
                    "****************************************\");\r\n        }\r\n\r\n        public static " +
                    "void ConsoleWriteHeader(params string[] lines)\r\n        {\r\n            var defau" +
                    "ltColor = Console.ForegroundColor;\r\n            Console.ForegroundColor = Consol" +
                    "eColor.Yellow;\r\n            Console.WriteLine(\" \");\r\n            foreach (var li" +
                    "ne in lines)\r\n            {\r\n                Console.WriteLine(line);\r\n         " +
                    "   }\r\n            var maxLength = lines.Select(x => x.Length).Max();\r\n          " +
                    "  Console.WriteLine(new string(\'#\', maxLength));\r\n            Console.Foreground" +
                    "Color = defaultColor;\r\n        }\r\n    }\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public string Namespace {get;set;}

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class ConsoleHelperBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
