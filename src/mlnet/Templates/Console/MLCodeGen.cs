//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Microsoft.ML.CLI.Templates.Console {
    using System.Linq;
    using System.Text;
    using System.Text.RegularExpressions;
    using System.Collections.Generic;
    using Microsoft.ML.CLI.Utilities;
    using System;
    
    
    public partial class MLCodeGen : MLCodeGenBase {
        

public string Path {get;set;}
public string TestPath {get;set;}
public IList<string> Columns {get;set;}
public bool HasHeader {get;set;}
public char Separator {get;set;}
public IList<string> Transforms {get;set;}
public string Trainer {get;set;}
public string TaskType {get;set;}
public IList<string> ClassLabels {get;set;}
public string GeneratedUsings {get;set;}
public bool AllowQuoting {get;set;}
public bool AllowSparse {get;set;}
public bool TrimWhiteSpace {get;set;} 
public int Kfolds {get;set;} = 5;
public string Namespace {get;set;}
public string LabelName {get;set;}
public string ModelPath {get;set;}

        
        public virtual string TransformText() {
            this.GenerationEnvironment = null;
            this.Write(@"//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.Data.DataView;
");
            this.Write(this.ToStringHelper.ToStringWithCulture( GeneratedUsings ));
            this.Write("\n\nnamespace ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Namespace ));
            this.Write("\n{\n    class Program\n    {\n        private static string TrainDataPath = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( Path ));
            this.Write("\";\n");
if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("        private static string TestDataPath = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( TestPath ));
            this.Write("\";\n");
 } 
            this.Write("        private static string ModelPath = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( ModelPath ));
            this.Write(@""";

        static void Main(string[] args)
        {
            // Create MLContext to be shared across the model creation workflow objects 
            var mlContext = new MLContext();

            var command = Command.Predict; // Your desired action here

            if (command == Command.Predict)
            {
                Predict(mlContext);
                ConsoleHelper.ConsoleWriteHeader(""=============== If you also want to train a model use Command.TrainAndPredict  ==============="");
            }

            if (command == Command.TrainAndPredict)
            {
                TrainEvaluateAndSaveModel(mlContext);
                Predict(mlContext);
            }

            Console.WriteLine(""=============== End of process, hit any key to finish ==============="");
            Console.ReadKey();
        }

        private enum Command
        {
            Predict,
            TrainAndPredict
        }

        private static ITransformer TrainEvaluateAndSaveModel(MLContext mlContext)
        {
            // Load data
            Console.WriteLine(""=============== Loading data ==============="");
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<SampleObservation>(
                                            path: TrainDataPath,
                                            hasHeader : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( HasHeader.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            separatorChar : \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( Regex.Escape(Separator.ToString()) ));
            this.Write("\',\n                                            allowQuoting : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowQuoting.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            allowSparse: ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowSparse.ToString().ToLowerInvariant() ));
            this.Write(");\n");
 if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("            IDataView testDataView = mlContext.Data.LoadFromTextFile<SampleObserv" +
                    "ation>(\n                                            path: TestDataPath,\n        " +
                    "                                    hasHeader : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( HasHeader.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            separatorChar : \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( Regex.Escape(Separator.ToString()) ));
            this.Write("\',\n                                            allowQuoting : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowQuoting.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            allowSparse: ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowSparse.ToString().ToLowerInvariant() ));
            this.Write(");\n");
 } 
            this.Write("\n");
 if(Transforms.Count >0 ) {
            this.Write("            // Common data process configuration with pipeline data transformatio" +
                    "ns\n            var dataProcessPipeline = ");
 for(int i=0;i<Transforms.Count;i++) 
                                         { 
                                             if(i>0)
                                             { Write("\r\n                                      .Append(");
                                             }
                                             Write("mlContext.Transforms."+Transforms[i]);
                                             if(i>0)
                                             { Write(")");
                                             }
                                         }
            this.Write(";\n");
}
            this.Write("\n            // Set the training algorithm, then create and config the modelBuild" +
                    "er  \n            var trainer = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture( TaskType ));
            this.Write(".Trainers.");
            this.Write(this.ToStringHelper.ToStringWithCulture( Trainer ));
            this.Write(";\n");
 if(Transforms.Count >0 ) {
            this.Write("            var trainingPipeline = dataProcessPipeline.Append(trainer);\n");
 }
else{
            this.Write("            var trainingPipeline = trainer;\n");
}
if(string.IsNullOrEmpty(TestPath)){ 
            this.Write(@"
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine(""=============== Cross-validating to get model's accuracy metrics ==============="");
");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("            var crossValidationResults = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture( TaskType ));
            this.Write(".CrossValidateNonCalibrated(trainingDataView, trainingPipeline, numFolds: ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Kfolds ));
            this.Write(", labelColumn:\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( LabelName ));
            this.Write("\");\n            ConsoleHelper.PrintBinaryClassificationFoldsAverageMetrics(traine" +
                    "r.ToString(), crossValidationResults);\n");
}
if("Regression".Equals(TaskType)){ 
            this.Write("            var crossValidationResults = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture( TaskType ));
            this.Write(".CrossValidate(trainingDataView, trainingPipeline, numFolds: ");
            this.Write(this.ToStringHelper.ToStringWithCulture( Kfolds ));
            this.Write(", labelColumn:\"");
            this.Write(this.ToStringHelper.ToStringWithCulture( LabelName ));
            this.Write("\");\n            ConsoleHelper.PrintRegressionFoldsAverageMetrics(trainer.ToString" +
                    "(), crossValidationResults);\n");
}
} 
            this.Write("\n            // Train the model fitting to the DataSet\n            Console.WriteL" +
                    "ine(\"=============== Training the model ===============\");\n            var train" +
                    "edModel = trainingPipeline.Fit(trainingDataView);\n");
 if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("\n            // Evaluate the model and show accuracy stats\n            Console.Wr" +
                    "iteLine(\"===== Evaluating Model\'s accuracy with Test data =====\");\n            v" +
                    "ar predictions = trainedModel.Transform(testDataView);\n");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("            var metrics = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture( TaskType ));
            this.Write(".EvaluateNonCalibrated(predictions, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( LabelName ));
            this.Write("\", \"Score\");\n            ConsoleHelper.PrintBinaryClassificationMetrics(trainer.T" +
                    "oString(), metrics);\n");
} if("Regression".Equals(TaskType)){ 
            this.Write("            var metrics = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture( TaskType ));
            this.Write(".Evaluate(predictions, \"");
            this.Write(this.ToStringHelper.ToStringWithCulture( LabelName ));
            this.Write("\", \"Score\");\n            ConsoleHelper.PrintRegressionMetrics(trainer.ToString()," +
                    " metrics);\n");
} 
} 
            this.Write(@"
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($""=============== Saving the model  ==============="");
            using (var fs = new FileStream(ModelPath, FileMode.Create, FileAccess.Write, FileShare.Write))
                mlContext.Model.Save(trainedModel, fs);

            Console.WriteLine(""The model is saved to {0}"", ModelPath);
            Console.WriteLine(""=============== End of training process ==============="");

            return trainedModel;
        }

        // Try/test a single prediction by loading the model from the file, first.
        private static void Predict(MLContext mlContext)
        {
            //Load data to test. Could be any test data. For demonstration purpose train data is used here.
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<SampleObservation>(
                                            path: TrainDataPath,
                                            hasHeader : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( HasHeader.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            separatorChar : \'");
            this.Write(this.ToStringHelper.ToStringWithCulture( Regex.Escape(Separator.ToString()) ));
            this.Write("\',\n                                            allowQuoting : ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowQuoting.ToString().ToLowerInvariant() ));
            this.Write(",\n                                            allowSparse: ");
            this.Write(this.ToStringHelper.ToStringWithCulture( AllowSparse.ToString().ToLowerInvariant() ));
            this.Write(@");

            var sample = mlContext.Data.CreateEnumerable<SampleObservation>(trainingDataView, false).First();

            ITransformer trainedModel;
            using (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                trainedModel = mlContext.Model.Load(stream);
            }

            // Create prediction engine related to the loaded trained model
            var predEngine= trainedModel.CreatePredictionEngine<SampleObservation, SamplePrediction>(mlContext);

            //Score
            var resultprediction = predEngine.Predict(sample);

            Console.WriteLine($""=============== Single Prediction  ==============="");
            Console.WriteLine($""Actual value: {sample.");
            this.Write(this.ToStringHelper.ToStringWithCulture( Utils.Normalize(LabelName) ));
            this.Write("} | Predicted value: {resultprediction.");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("Prediction");
}else{
            this.Write("Score");
}
            this.Write("}\");\n            Console.WriteLine($\"============================================" +
                    "======\");\n        }\n\n    }\n\n    public class SampleObservation\n    {\n");

foreach(var label in ClassLabels)
{
            this.Write("       ");
            this.Write(this.ToStringHelper.ToStringWithCulture(label));
            this.Write("\n");

}

            this.Write("    }\n\n    public class SamplePrediction\n    {\n");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("        // ColumnName attribute is used to change the column name from\n        //" +
                    " its default value, which is the name of the field.\n        [ColumnName(\"Predict" +
                    "edLabel\")]\n        public bool Prediction { get; set; }\n\n");
 } 
if("MulticlassClassification".Equals(TaskType)){ 
            this.Write("        public float[] Score { get; set; }\n");
}else{ 
            this.Write("        public float Score { get; set; }\n");
}
            this.Write("    }\n\n}\n");
            return this.GenerationEnvironment.ToString();
        }
        
        public virtual void Initialize() {
        }
    }
    
    public class MLCodeGenBase {
        
        private global::System.Text.StringBuilder builder;
        
        private global::System.Collections.Generic.IDictionary<string, object> session;
        
        private global::System.CodeDom.Compiler.CompilerErrorCollection errors;
        
        private string currentIndent = string.Empty;
        
        private global::System.Collections.Generic.Stack<int> indents;
        
        private ToStringInstanceHelper _toStringHelper = new ToStringInstanceHelper();
        
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session {
            get {
                return this.session;
            }
            set {
                this.session = value;
            }
        }
        
        public global::System.Text.StringBuilder GenerationEnvironment {
            get {
                if ((this.builder == null)) {
                    this.builder = new global::System.Text.StringBuilder();
                }
                return this.builder;
            }
            set {
                this.builder = value;
            }
        }
        
        protected global::System.CodeDom.Compiler.CompilerErrorCollection Errors {
            get {
                if ((this.errors == null)) {
                    this.errors = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errors;
            }
        }
        
        public string CurrentIndent {
            get {
                return this.currentIndent;
            }
        }
        
        private global::System.Collections.Generic.Stack<int> Indents {
            get {
                if ((this.indents == null)) {
                    this.indents = new global::System.Collections.Generic.Stack<int>();
                }
                return this.indents;
            }
        }
        
        public ToStringInstanceHelper ToStringHelper {
            get {
                return this._toStringHelper;
            }
        }
        
        public void Error(string message) {
            this.Errors.Add(new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message));
        }
        
        public void Warning(string message) {
            global::System.CodeDom.Compiler.CompilerError val = new global::System.CodeDom.Compiler.CompilerError(null, -1, -1, null, message);
            val.IsWarning = true;
            this.Errors.Add(val);
        }
        
        public string PopIndent() {
            if ((this.Indents.Count == 0)) {
                return string.Empty;
            }
            int lastPos = (this.currentIndent.Length - this.Indents.Pop());
            string last = this.currentIndent.Substring(lastPos);
            this.currentIndent = this.currentIndent.Substring(0, lastPos);
            return last;
        }
        
        public void PushIndent(string indent) {
            this.Indents.Push(indent.Length);
            this.currentIndent = (this.currentIndent + indent);
        }
        
        public void ClearIndent() {
            this.currentIndent = string.Empty;
            this.Indents.Clear();
        }
        
        public void Write(string textToAppend) {
            this.GenerationEnvironment.Append(textToAppend);
        }
        
        public void Write(string format, params object[] args) {
            this.GenerationEnvironment.AppendFormat(format, args);
        }
        
        public void WriteLine(string textToAppend) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendLine(textToAppend);
        }
        
        public void WriteLine(string format, params object[] args) {
            this.GenerationEnvironment.Append(this.currentIndent);
            this.GenerationEnvironment.AppendFormat(format, args);
            this.GenerationEnvironment.AppendLine();
        }
        
        public class ToStringInstanceHelper {
            
            private global::System.IFormatProvider formatProvider = global::System.Globalization.CultureInfo.InvariantCulture;
            
            public global::System.IFormatProvider FormatProvider {
                get {
                    return this.formatProvider;
                }
                set {
                    if ((value != null)) {
                        this.formatProvider = value;
                    }
                }
            }
            
            public string ToStringWithCulture(object objectToConvert) {
                if ((objectToConvert == null)) {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                global::System.Type type = objectToConvert.GetType();
                global::System.Type iConvertibleType = typeof(global::System.IConvertible);
                if (iConvertibleType.IsAssignableFrom(type)) {
                    return ((global::System.IConvertible)(objectToConvert)).ToString(this.formatProvider);
                }
                global::System.Reflection.MethodInfo methInfo = type.GetMethod("ToString", new global::System.Type[] {
                            iConvertibleType});
                if ((methInfo != null)) {
                    return ((string)(methInfo.Invoke(objectToConvert, new object[] {
                                this.formatProvider})));
                }
                return objectToConvert.ToString();
            }
        }
    }
}
