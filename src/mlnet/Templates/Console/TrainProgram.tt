<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.ML.CLI.Utilities" #>
//*****************************************************************************************
//*                                                                                       *
//* This is an auto-generated file by Microsoft ML.NET CLI (Command-Line Interface) tool. *
//*                                                                                       *
//*****************************************************************************************

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Data;
using Microsoft.Data.DataView;
using <#= Namespace #>.Model.DataModels;
<#= GeneratedUsings #>
namespace <#= Namespace #>.Train
{
    class Program
    {
        private static string TRAIN_DATA_FILEPATH = @"<#= Path #>";
<#if(!string.IsNullOrEmpty(TestPath)){ #>
        private static string TEST_DATA_FILEPATH = @"<#= TestPath #>";
<# } #>
        private static string MODEL_FILEPATH = @"../../../../<#= Namespace #>.Model/MLModel.zip";

        static void Main(string[] args)
        {
            // Create MLContext to be shared across the model creation workflow objects 
            // Set a random seed for repeatable/deterministic results across multiple trainings.
            MLContext mlContext = new MLContext(seed: 1);

            // Load Data
            IDataView trainingDataView = mlContext.Data.LoadFromTextFile<SampleObservation>(
                                            path: TRAIN_DATA_FILEPATH,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuoting : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            allowSparse: <#= AllowSparse.ToString().ToLowerInvariant() #>);

<# if(!string.IsNullOrEmpty(TestPath)){ #>
            IDataView testDataView = mlContext.Data.LoadFromTextFile<SampleObservation>(
                                            path: TEST_DATA_FILEPATH,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuoting : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            allowSparse: <#= AllowSparse.ToString().ToLowerInvariant() #>);
<#}#>
            // Build training pipeline
            IEstimator<ITransformer> trainingPipeline = BuildTrainingPipeline(mlContext);

<# if(string.IsNullOrEmpty(TestPath)){ #>
            // Evaluate quality of Model
            EvaluateModel(mlContext, trainingDataView, trainingPipeline);

<#}#>
            // Train Model
            ITransformer mlModel = TrainModel(mlContext, trainingDataView, trainingPipeline);
<# if(!string.IsNullOrEmpty(TestPath)){ #>

            // Evaluate quality of Model
            EvaluateModel(mlContext, mlModel, testDataView);
<#}#>

            // Save model
            SaveModel(mlContext, mlModel, MODEL_FILEPATH);

            Console.WriteLine("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();
        }

        public static IEstimator<ITransformer> BuildTrainingPipeline(MLContext mlContext)
        {
<# if(PreTrainerTransforms.Count >0 ) {#>
            // Data process configuration with pipeline data transformations 
            var dataProcessPipeline = <# for(int i=0;i<PreTrainerTransforms.Count;i++) 
                                         { 
                                             if(i>0)
                                             { Write("\r\n                                      .Append(");
                                             }
                                             Write("mlContext.Transforms."+PreTrainerTransforms[i]);
                                             if(i>0)
                                             { Write(")");
                                             }
                                         }
                                      if(CacheBeforeTrainer){ 
                                           Write("\r\n                                      .AppendCacheCheckpoint(mlContext)");
                                           } #>;
<#}#>

            // Set the training algorithm 
            var trainer = mlContext.<#= TaskType #>.Trainers.<#= Trainer #><# for(int i=0;i<PostTrainerTransforms.Count;i++) 
                                         { 
                                             Write("\r\n                                      .Append(");
                                             Write("mlContext.Transforms."+PostTrainerTransforms[i]);
                                             Write(")");
                                         }#>;
<# if(PreTrainerTransforms.Count >0 ) {#>
            var trainingPipeline = dataProcessPipeline.Append(trainer);
<# }
else{#>
            var trainingPipeline = trainer;
<#}#>

            return trainingPipeline;
        }

        public static ITransformer TrainModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            Console.WriteLine("=============== Training  model ===============");

            ITransformer model = trainingPipeline.Fit(trainingDataView);

            Console.WriteLine("=============== End of training process ===============");
            return model;
        }

<# if(!string.IsNullOrEmpty(TestPath)){ #>
        private static void EvaluateModel(MLContext mlContext, ITransformer mlModel, IDataView testDataView)
        {
            // Evaluate the model and show accuracy stats
            Console.WriteLine("===== Evaluating Model's accuracy with Test data =====");
            IDataView predictions = mlModel.Transform(testDataView);
<#if("BinaryClassification".Equals(TaskType)){ #>
            var metrics = mlContext.<#= TaskType #>.EvaluateNonCalibrated(predictions, "<#= LabelName #>", "Score");
            ConsoleHelper.PrintBinaryClassificationMetrics(metrics);
<#} if("MulticlassClassification".Equals(TaskType)){ #>
            var metrics = mlContext.<#= TaskType #>.Evaluate(predictions, "<#= LabelName #>", "Score");
            ConsoleHelper.PrintMultiClassClassificationMetrics(metrics);
<#}if("Regression".Equals(TaskType)){ #>
            var metrics = mlContext.<#= TaskType #>.Evaluate(predictions, "<#= LabelName #>", "Score");
            ConsoleHelper.PrintRegressionMetrics(metrics);
<#} #>
        }
<#}else{#>
        private static void EvaluateModel(MLContext mlContext, IDataView trainingDataView, IEstimator<ITransformer> trainingPipeline)
        {
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
<#if("BinaryClassification".Equals(TaskType)){ #>
            var crossValidationResults = mlContext.<#= TaskType #>.CrossValidateNonCalibrated(trainingDataView, trainingPipeline, numFolds: <#= Kfolds #>, labelColumn:"<#= LabelName #>");
            ConsoleHelper.PrintBinaryClassificationFoldsAverageMetrics(crossValidationResults);
<#}#><#if("MulticlassClassification".Equals(TaskType)){ #>
            var crossValidationResults = mlContext.<#= TaskType #>.CrossValidate(trainingDataView, trainingPipeline, numFolds: <#= Kfolds #>, labelColumn:"<#= LabelName #>");
            ConsoleHelper.PrintMulticlassClassificationFoldsAverageMetrics(crossValidationResults);
<#}#><#if("Regression".Equals(TaskType)){ #>
            var crossValidationResults = mlContext.<#= TaskType #>.CrossValidate(trainingDataView, trainingPipeline, numFolds: <#= Kfolds #>, labelColumn:"<#= LabelName #>");
            ConsoleHelper.PrintRegressionFoldsAverageMetrics(crossValidationResults);
<#}#>
        }
<#}#>
        private static void SaveModel(MLContext mlContext, ITransformer mlModel, string modelRelativePath)
        {
            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($"=============== Saving the model  ===============");
            using (var fs = new FileStream(GetAbsolutePath(modelRelativePath), FileMode.Create, FileAccess.Write, FileShare.Write))
                mlContext.Model.Save(mlModel, fs);

            Console.WriteLine("The model is saved to {0}", GetAbsolutePath(modelRelativePath));
        }

        public static string GetAbsolutePath(string relativePath)
        {
            FileInfo _dataRoot = new FileInfo(typeof(Program).Assembly.Location);
            string assemblyFolderPath = _dataRoot.Directory.FullName;

            string fullPath = Path.Combine(assemblyFolderPath, relativePath);

            return fullPath;
        }
    }
}
<#+
public string Path {get;set;}
public string TestPath {get;set;}
public bool HasHeader {get;set;}
public char Separator {get;set;}
public IList<string> PreTrainerTransforms {get;set;}
public string Trainer {get;set;}
public string TaskType {get;set;}
public string GeneratedUsings {get;set;}
public bool AllowQuoting {get;set;}
public bool AllowSparse {get;set;}
public int Kfolds {get;set;} = 5;
public string Namespace {get;set;}
public string LabelName {get;set;}
public bool CacheBeforeTrainer {get;set;}
public IList<string> PostTrainerTransforms {get;set;}
#>
