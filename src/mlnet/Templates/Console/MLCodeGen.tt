<#@ template language="C#" linePragmas="false" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Text.RegularExpressions" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="Microsoft.ML.CLI.Utilities" #>
// This is an auto generated file by ML.NET CLI

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Core.Data;
using Microsoft.ML.Data;
using Microsoft.Data.DataView;
<#= GeneratedUsings #>

namespace <#= Namespace #>
{
    class Program
    {
        private static string TrainDataPath = @"<#= Path #>";
<#if(!string.IsNullOrEmpty(TestPath)){ #>
        private static string TestDataPath = @"<#= TestPath #>";
<# } #>
        private static string ModelPath = @"./model.zip";

        // Set this flag to enable the training process.
        private static bool EnableTraining = false;

        static void Main(string[] args)
        {
            // Create MLContext to be shared across the model creation workflow objects 
            // Set a random seed for repeatable/deterministic results across multiple trainings.
            var mlContext = new MLContext(seed: 1);

            if (EnableTraining)
            {
                // Create, Train, Evaluate and Save a model
                BuildTrainEvaluateAndSaveModel(mlContext);
                ConsoleHelper.ConsoleWriteHeader("=============== End of training process ===============");
            }
            else
            {
                ConsoleHelper.ConsoleWriteHeader("Skipping the training process. Please set the flag : 'EnableTraining' to 'true' to enable the training process.");
            }

            // Make a single test prediction loading the model from .ZIP file
            TestSinglePrediction(mlContext);

            ConsoleHelper.ConsoleWriteHeader("=============== End of process, hit any key to finish ===============");
            Console.ReadKey();

        }

        private static ITransformer BuildTrainEvaluateAndSaveModel(MLContext mlContext)
        {
            // Data loading
            IDataView trainingDataView = mlContext.Data.ReadFromTextFile<SampleObservation>(
                                            path: TrainDataPath,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuotedStrings : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            trimWhitespace : <#= TrimWhiteSpace.ToString().ToLowerInvariant() #> ,
                                            supportSparse : <#= AllowSparse.ToString().ToLowerInvariant() #>);
<# if(!string.IsNullOrEmpty(TestPath)){ #>
            IDataView testDataView = mlContext.Data.ReadFromTextFile<SampleObservation>(
                                            path: TestDataPath,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuotedStrings : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            trimWhitespace : <#= TrimWhiteSpace.ToString().ToLowerInvariant() #> ,
                                            supportSparse : <#= AllowSparse.ToString().ToLowerInvariant() #>);
<# } #>

<# if(Transforms.Count >0 ) {#>
            // Common data process configuration with pipeline data transformations
            var dataProcessPipeline = <# for(int i=0;i<Transforms.Count;i++) 
                                         { 
                                             if(i>0)
                                             { Write("\r\n                                      .Append(");
                                             }
                                             Write("mlContext.Transforms."+Transforms[i]);
                                             if(i>0)
                                             { Write(")");
                                             }
                                         }#>;
<#}#>

            // Set the training algorithm, then create and config the modelBuilder  
            var trainer = mlContext.<#= TaskType #>.Trainers.<#= Trainer #>;
<# if(Transforms.Count >0 ) {#>
            var trainingPipeline = dataProcessPipeline.Append(trainer);
<# }
else{#>
            var trainingPipeline = trainer;
<#}#>
<# if(string.IsNullOrEmpty(TestPath)){ #>

            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine("=============== Cross-validating to get model's accuracy metrics ===============");
<#if("BinaryClassification".Equals(TaskType)){ #>
            var crossValidationResults = mlContext.<#= TaskType #>.CrossValidateNonCalibrated(trainingDataView, trainingPipeline, numFolds: <#= Kfolds #>, labelColumn:"<#= LabelName #>");
            ConsoleHelper.PrintBinaryClassificationFoldsAverageMetrics(trainer.ToString(), crossValidationResults);
<#}#><#if("Regression".Equals(TaskType)){ #>
            var crossValidationResults = mlContext.<#= TaskType #>.CrossValidate(trainingDataView, trainingPipeline, numFolds: <#= Kfolds #>, labelColumn:"<#= LabelName #>");
            ConsoleHelper.PrintRegressionFoldsAverageMetrics(trainer.ToString(), crossValidationResults);
<#}
} #>

            // Train the model fitting to the DataSet
            Console.WriteLine("=============== Training the model ===============");
            var trainedModel = trainingPipeline.Fit(trainingDataView);

<# if(!string.IsNullOrEmpty(TestPath)){ #>
            // Evaluate the model and show accuracy stats
            Console.WriteLine("===== Evaluating Model's accuracy with Test data =====");
            var predictions = trainedModel.Transform(testDataView);
<#if("BinaryClassification".Equals(TaskType)){ #>
            var metrics = mlContext.<#= TaskType #>.EvaluateNonCalibrated(predictions, "<#= LabelName #>", "Score");
            ConsoleHelper.PrintBinaryClassificationMetrics(trainer.ToString(), metrics);
<#}#><#if("Regression".Equals(TaskType)){ #>
            var metrics = mlContext.<#= TaskType #>.Evaluate(predictions, "<#= LabelName #>", "Score");
            ConsoleHelper.PrintRegressionMetrics(trainer.ToString(), metrics);
<#}#>
<# } #>

            // Save/persist the trained model to a .ZIP file
            Console.WriteLine($"=============== Saving the model  ===============");
            using (var fs = new FileStream(ModelPath, FileMode.Create, FileAccess.Write, FileShare.Write))
                mlContext.Model.Save(trainedModel, fs);

            Console.WriteLine("The model is saved to {0}", ModelPath);

            return trainedModel;
        }

        // (OPTIONAL) Try/test a single prediction by loading the model from the file, first.
        private static void TestSinglePrediction(MLContext mlContext)
        {
            //Load data to test. Could be any test data. For demonstration purpose train data is used here.
            IDataView trainingDataView = mlContext.Data.ReadFromTextFile<SampleObservation>(
                                            path: TrainDataPath,
                                            hasHeader : <#= HasHeader.ToString().ToLowerInvariant() #>,
                                            separatorChar : '<#= Regex.Escape(Separator.ToString()) #>',
                                            allowQuotedStrings : <#= AllowQuoting.ToString().ToLowerInvariant() #>,
                                            trimWhitespace : <#= TrimWhiteSpace.ToString().ToLowerInvariant() #> ,
                                            supportSparse : <#= AllowSparse.ToString().ToLowerInvariant() #>);

            var sample = mlContext.CreateEnumerable<SampleObservation>(trainingDataView, false).First();

            ITransformer trainedModel;
            using (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                trainedModel = mlContext.Model.Load(stream);
            }

            // Create prediction engine related to the loaded trained model
            var predEngine= trainedModel.CreatePredictionEngine<SampleObservation, SamplePrediction>(mlContext);

            //Score
            var resultprediction = predEngine.Predict(sample);

            Console.WriteLine($"=============== Single Prediction  ===============");
            Console.WriteLine($"Actual value: {sample.<#= Utils.Normalize(LabelName) #>} | Predicted value: {resultprediction.<#if("BinaryClassification".Equals(TaskType)){ #>Prediction<#}else{#>Score<#}#>}");
            Console.WriteLine($"==================================================");
        }

    }

    public class SampleObservation
    {
<#
foreach(var label in ClassLabels)
{#>
       <#=label#>
<#
}
#>
    }

    public class SamplePrediction
    {
<#if("BinaryClassification".Equals(TaskType)){ #>
        // ColumnName attribute is used to change the column name from
        // its default value, which is the name of the field.
        [ColumnName("PredictedLabel")]
        public bool Prediction { get; set; }

<# } #>
<#if("MultiClassClassification".Equals(TaskType)){ #>
        public float[] Score { get; set; }
<#}else{ #>
        public float Score { get; set; }
<#}#>
    }

}
<#+
public string Path {get;set;}
public string TestPath {get;set;}
public IList<string> Columns {get;set;}
public bool HasHeader {get;set;}
public char Separator {get;set;}
public IList<string> Transforms {get;set;}
public string Trainer {get;set;}
public string TaskType {get;set;}
public IList<string> ClassLabels {get;set;}
public string GeneratedUsings {get;set;}
public bool AllowQuoting {get;set;}
public bool AllowSparse {get;set;}
public bool TrimWhiteSpace {get;set;} 
public int Kfolds {get;set;} = 5;
public string Namespace {get;set;}
public string LabelName {get;set;}
#>
