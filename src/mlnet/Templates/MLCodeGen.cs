// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 15.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace mlnet.Templates
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public partial class MLCodeGen : MLCodeGenBase
    {
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write(@"/* This template shows the building blocks for training a machine learning model with ML.NET (https://aka.ms/mlnet).
 * This model predicts whether a sentence has a positive or negative sentiment. It is based on a sample that can be 
 * found at https://aka.ms/mlnetsentimentanalysis, which provides a more detailed introduction to ML.NET and the scenario. */

using System;
using System.IO;
using System.Linq;
using Microsoft.ML;
using Microsoft.ML.Core.Data;
using Microsoft.ML.Data;
using static Microsoft.ML.Data.TextLoader;
using Microsoft.Data.DataView;
");
            this.Write(this.ToStringHelper.ToStringWithCulture(GeneratedUsings));
            this.Write("\r\n\r\n\r\nnamespace MlnetSample\r\n{\r\n    class Program\r\n    {\r\n        private static " +
                    "string TrainDataPath = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(Path));
            this.Write("\";\r\n");
if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("        private static string TestDataPath = @\"");
            this.Write(this.ToStringHelper.ToStringWithCulture(TestPath));
            this.Write("\"; ");
 } 
            this.Write(@"        private static string ModelPath = @""./model.zip"";

        static void Main(string[] args)
        {
            //Create MLContext to be shared across the model creation workflow objects 
            //Set a random seed for repeatable/deterministic results across multiple trainings.
            var mlContext = new MLContext(seed: 1);

            // Create, Train, Evaluate and Save a model
            BuildTrainEvaluateAndSaveModel(mlContext);
            ConsoleHelper.ConsoleWriteHeader(""=============== End of training process ==============="");

            // Make a single test prediction loding the model from .ZIP file
            TestSinglePrediction(mlContext);

            ConsoleHelper.ConsoleWriteHeader(""=============== End of process, hit any key to finish ==============="");
            Console.ReadKey();

        }

        private static ITransformer BuildTrainEvaluateAndSaveModel(MLContext mlContext)
        {
            // Common data loading configuration
            TextLoader textLoader = GetTextLoader(mlContext);

            IDataView trainingDataView = textLoader.Read(TrainDataPath);
");
 if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("            IDataView testDataView = textLoader.Read(TestDataPath);\r\n");
 } 
            this.Write("\r\n");
 if(Transforms.Count >0 ) {
            this.Write("            // Common data process configuration with pipeline data transformatio" +
                    "ns          \r\n\r\n            var dataProcessPipeline = ");
 for(int i=0;i<Transforms.Count;i++) 
			{ 
			   if(i>0)
			   { Write("\n                                    .Append(");
			   }
			   Write("mlContext.Transforms."+Transforms[i]);
			   if(i>0)
			   { Write(")");
			   }
            }
            this.Write(";\r\n");
}
            this.Write("\r\n            // Set the training algorithm, then create and config the modelBuil" +
                    "der  \r\n            var trainer = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(TaskType));
            this.Write(".Trainers.");
            this.Write(this.ToStringHelper.ToStringWithCulture(Trainer));
            this.Write(";\r\n\r\n            // Train the model fitting to the DataSet\r\n");
 if(Transforms.Count >0 ) {
            this.Write("            var trainingPipeline = dataProcessPipeline.Append(trainer);\r\n        " +
                    "    var trainedModel = trainingPipeline.Fit(trainingDataView);\r\n");
 }
else{
            this.Write("            var trainingPipeline = trainer;\r\n            var trainedModel = train" +
                    "ingPipeline.Fit(trainingDataView);\r\n");
}
 if(!string.IsNullOrEmpty(TestPath)){ 
            this.Write("            // Evaluate the model and show accuracy stats\r\n            Console.Wr" +
                    "iteLine(\"===== Evaluating Model\'s accuracy with Test data =====\");\r\n            " +
                    "var predictions = trainedModel.Transform(testDataView);\r\n            var metrics" +
                    " = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(TaskType));
            this.Write(".Evaluate(predictions, \"Label\", \"Score\");\r\n");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("            ConsoleHelper.PrintBinaryClassificationMetrics(trainer.ToString(), me" +
                    "trics);\r\n");
}
if("Regression".Equals(TaskType)){ 
            this.Write("            ConsoleHelper.PrintRegressionMetrics(trainer.ToString(), metrics);\r\n");
}
 } else{ 
            this.Write(@"
            // Cross-Validate with single dataset (since we don't have two datasets, one for training and for evaluate)
            // in order to evaluate and get the model's accuracy metrics
            Console.WriteLine(""=============== Cross-validating to get model's accuracy metrics ==============="");
");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("            var crossValidationResults = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(TaskType));
            this.Write(".CrossValidateNonCalibrated(trainingDataView, trainingPipeline, numFolds: 3, labe" +
                    "lColumn:\"Label\");\r\n            ConsoleHelper.PrintBinaryClassificationFoldsAvera" +
                    "geMetrics(trainer.ToString(), crossValidationResults);\r\n");
}
if("Regression".Equals(TaskType)){ 
            this.Write("            var crossValidationResults = mlContext.");
            this.Write(this.ToStringHelper.ToStringWithCulture(TaskType));
            this.Write(".CrossValidate(trainingDataView, trainingPipeline, numFolds: 3, labelColumn:\"Labe" +
                    "l\");\r\n            ConsoleHelper.PrintRegressionFoldsAverageMetrics(trainer.ToStr" +
                    "ing(), crossValidationResults);\r\n");
}
 } 
            this.Write(@"
            // Save/persist the trained model to a .ZIP file
            using (var fs = new FileStream(ModelPath, FileMode.Create, FileAccess.Write, FileShare.Write))
                mlContext.Model.Save(trainedModel, fs);

            Console.WriteLine(""The model is saved to {0}"", ModelPath);

            return trainedModel;
        }

        private static TextLoader GetTextLoader(MLContext mlContext)
        {
            return mlContext.Data.CreateTextLoader(new TextLoader.Arguments()
            {
                Column = new[]{
");
 foreach(var col in Columns) {
            this.Write("                                  ");
            this.Write(this.ToStringHelper.ToStringWithCulture(col));
            this.Write("\r\n");
 } 
            this.Write("                              },                                                 " +
                    "    \r\n                HasHeader = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(HasHeader.ToString().ToLowerInvariant()));
            this.Write(",\r\n                Separators = new char[] {");
 Write(string.Join(",", Separators.Select(t => "'" + t.ToString() + "'").ToArray())); 
            this.Write("},\r\n                AllowQuoting = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(AllowQuotedStrings.ToString().ToLowerInvariant()));
            this.Write(",\r\n                TrimWhitespace = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(TrimWhiteSpace.ToString().ToLowerInvariant()));
            this.Write(" ,\r\n                AllowSparse = ");
            this.Write(this.ToStringHelper.ToStringWithCulture(SupportSparse.ToString().ToLowerInvariant()));
            this.Write(@"
             });
        }

        // (OPTIONAL) Try/test a single prediction by loding the model from the file, first.
        private static void TestSinglePrediction(MLContext mlContext)
        {
            TextLoader textLoader = GetTextLoader(mlContext);

            //Load data to test. Could be any test data. For demonstration purpose train data is used here.
            IDataView trainingDataView = textLoader.Read(TrainDataPath);

            var sample = mlContext.CreateEnumerable<SampleClass>(trainingDataView, false).First();

            ITransformer trainedModel;
            using (var stream = new FileStream(ModelPath, FileMode.Open, FileAccess.Read, FileShare.Read))
            {
                trainedModel = mlContext.Model.Load(stream);
            }

            // Create prediction engine related to the loaded trained model
            var predEngine= trainedModel.CreatePredictionEngine<SampleClass, SamplePrediction>(mlContext);

            //Score
            var resultprediction = predEngine.Predict(sample);

            Console.WriteLine($""=============== Single Prediction  ==============="");
            Console.WriteLine($""Input: {sample} | Prediction: {resultprediction.");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("Prediction");
}else{
            this.Write("Score");
}
            this.Write("} ");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write("Probability: {resultprediction.Probability} ");
 } 
            this.Write("\");\r\n            Console.WriteLine($\"============================================" +
                    "======\");\r\n        }\r\n\r\n    }\r\n\r\n    public class SampleClass\r\n    {\r\n");

foreach(var label in ClassLabels)
{
            this.Write("       ");
            this.Write(this.ToStringHelper.ToStringWithCulture(label));
            this.Write("\r\n");

}

            this.Write("    }\r\n\r\n    public class SamplePrediction\r\n    {\r\n");
if("BinaryClassification".Equals(TaskType)){ 
            this.Write(@"        // ColumnName attribute is used to change the column name from
        // its default value, which is the name of the field.
        [ColumnName(""PredictedLabel"")]
        public bool Prediction { get; set; }

        // No need to specify ColumnName attribute, because the field
        // name ""Probability"" is the column name we want.
        public float Probability { get; set; }
");
 } 
if("MultiClassClassification".Equals(TaskType)){ 
            this.Write("        public float[] Score { get; set; }\r\n");
}else{ 
            this.Write("        public float Score { get; set; }\r\n");
}
            this.Write("    }\r\n\r\n}\r\n");
            return this.GenerationEnvironment.ToString();
        }

public string Path {get;set;}
public string TestPath {get;set;}
public IList<string> Columns {get;set;}
public bool HasHeader {get;set;}
public char[] Separators {get;set;}
public IList<string> Transforms {get;set;}
public string Trainer {get;set;}
public string TaskType {get;set;}
public IList<string> ClassLabels {get;set;}
public string GeneratedUsings {get;set;}
public bool AllowQuotedStrings {get;set;}
public bool SupportSparse {get;set;}
public bool TrimWhiteSpace {get;set;} 

    }
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "15.0.0.0")]
    public class MLCodeGenBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
